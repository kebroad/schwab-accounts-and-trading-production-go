/*
Trader API - Account Access and User Preferences

Schwab Trader API access to Account, Order entry and User Preferences

API version: 1.0.0
Contact: TraderAPI@Schwab.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
)

// OrderStrategyType the model 'OrderStrategyType'
type OrderStrategyType string

// List of orderStrategyType
const (
	ORDERSTRATEGYTYPE_SINGLE OrderStrategyType = "SINGLE"
	ORDERSTRATEGYTYPE_CANCEL OrderStrategyType = "CANCEL"
	ORDERSTRATEGYTYPE_RECALL OrderStrategyType = "RECALL"
	ORDERSTRATEGYTYPE_PAIR OrderStrategyType = "PAIR"
	ORDERSTRATEGYTYPE_FLATTEN OrderStrategyType = "FLATTEN"
	ORDERSTRATEGYTYPE_TWO_DAY_SWAP OrderStrategyType = "TWO_DAY_SWAP"
	ORDERSTRATEGYTYPE_BLAST_ALL OrderStrategyType = "BLAST_ALL"
	ORDERSTRATEGYTYPE_OCO OrderStrategyType = "OCO"
	ORDERSTRATEGYTYPE_TRIGGER OrderStrategyType = "TRIGGER"
)

// All allowed values of OrderStrategyType enum
var AllowedOrderStrategyTypeEnumValues = []OrderStrategyType{
	"SINGLE",
	"CANCEL",
	"RECALL",
	"PAIR",
	"FLATTEN",
	"TWO_DAY_SWAP",
	"BLAST_ALL",
	"OCO",
	"TRIGGER",
}

func (v *OrderStrategyType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := OrderStrategyType(value)
	for _, existing := range AllowedOrderStrategyTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid OrderStrategyType", value)
}

// NewOrderStrategyTypeFromValue returns a pointer to a valid OrderStrategyType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewOrderStrategyTypeFromValue(v string) (*OrderStrategyType, error) {
	ev := OrderStrategyType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for OrderStrategyType: valid values are %v", v, AllowedOrderStrategyTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v OrderStrategyType) IsValid() bool {
	for _, existing := range AllowedOrderStrategyTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to orderStrategyType value
func (v OrderStrategyType) Ptr() *OrderStrategyType {
	return &v
}

type NullableOrderStrategyType struct {
	value *OrderStrategyType
	isSet bool
}

func (v NullableOrderStrategyType) Get() *OrderStrategyType {
	return v.value
}

func (v *NullableOrderStrategyType) Set(val *OrderStrategyType) {
	v.value = val
	v.isSet = true
}

func (v NullableOrderStrategyType) IsSet() bool {
	return v.isSet
}

func (v *NullableOrderStrategyType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrderStrategyType(val *OrderStrategyType) *NullableOrderStrategyType {
	return &NullableOrderStrategyType{value: val, isSet: true}
}

func (v NullableOrderStrategyType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrderStrategyType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

