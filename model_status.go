/*
Trader API - Account Access and User Preferences

Schwab Trader API access to Account, Order entry and User Preferences

API version: 1.0.0
Contact: TraderAPI@Schwab.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
)

// Status the model 'Status'
type Status string

// List of status
const (
	STATUS_AWAITING_PARENT_ORDER Status = "AWAITING_PARENT_ORDER"
	STATUS_AWAITING_CONDITION Status = "AWAITING_CONDITION"
	STATUS_AWAITING_STOP_CONDITION Status = "AWAITING_STOP_CONDITION"
	STATUS_AWAITING_MANUAL_REVIEW Status = "AWAITING_MANUAL_REVIEW"
	STATUS_ACCEPTED Status = "ACCEPTED"
	STATUS_AWAITING_UR_OUT Status = "AWAITING_UR_OUT"
	STATUS_PENDING_ACTIVATION Status = "PENDING_ACTIVATION"
	STATUS_QUEUED Status = "QUEUED"
	STATUS_WORKING Status = "WORKING"
	STATUS_REJECTED Status = "REJECTED"
	STATUS_PENDING_CANCEL Status = "PENDING_CANCEL"
	STATUS_CANCELED Status = "CANCELED"
	STATUS_PENDING_REPLACE Status = "PENDING_REPLACE"
	STATUS_REPLACED Status = "REPLACED"
	STATUS_FILLED Status = "FILLED"
	STATUS_EXPIRED Status = "EXPIRED"
	STATUS_NEW Status = "NEW"
	STATUS_AWAITING_RELEASE_TIME Status = "AWAITING_RELEASE_TIME"
	STATUS_PENDING_ACKNOWLEDGEMENT Status = "PENDING_ACKNOWLEDGEMENT"
	STATUS_PENDING_RECALL Status = "PENDING_RECALL"
	STATUS_UNKNOWN Status = "UNKNOWN"
)

// All allowed values of Status enum
var AllowedStatusEnumValues = []Status{
	"AWAITING_PARENT_ORDER",
	"AWAITING_CONDITION",
	"AWAITING_STOP_CONDITION",
	"AWAITING_MANUAL_REVIEW",
	"ACCEPTED",
	"AWAITING_UR_OUT",
	"PENDING_ACTIVATION",
	"QUEUED",
	"WORKING",
	"REJECTED",
	"PENDING_CANCEL",
	"CANCELED",
	"PENDING_REPLACE",
	"REPLACED",
	"FILLED",
	"EXPIRED",
	"NEW",
	"AWAITING_RELEASE_TIME",
	"PENDING_ACKNOWLEDGEMENT",
	"PENDING_RECALL",
	"UNKNOWN",
}

func (v *Status) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := Status(value)
	for _, existing := range AllowedStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Status", value)
}

// NewStatusFromValue returns a pointer to a valid Status
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewStatusFromValue(v string) (*Status, error) {
	ev := Status(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for Status: valid values are %v", v, AllowedStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Status) IsValid() bool {
	for _, existing := range AllowedStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to status value
func (v Status) Ptr() *Status {
	return &v
}

type NullableStatus struct {
	value *Status
	isSet bool
}

func (v NullableStatus) Get() *Status {
	return v.value
}

func (v *NullableStatus) Set(val *Status) {
	v.value = val
	v.isSet = true
}

func (v NullableStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStatus(val *Status) *NullableStatus {
	return &NullableStatus{value: val, isSet: true}
}

func (v NullableStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

