/*
Trader API - Account Access and User Preferences

Schwab Trader API access to Account, Order entry and User Preferences

API version: 1.0.0
Contact: TraderAPI@Schwab.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
)

// PriceLinkBasis the model 'PriceLinkBasis'
type PriceLinkBasis string

// List of priceLinkBasis
const (
	PRICELINKBASIS_MANUAL PriceLinkBasis = "MANUAL"
	PRICELINKBASIS_BASE PriceLinkBasis = "BASE"
	PRICELINKBASIS_TRIGGER PriceLinkBasis = "TRIGGER"
	PRICELINKBASIS_LAST PriceLinkBasis = "LAST"
	PRICELINKBASIS_BID PriceLinkBasis = "BID"
	PRICELINKBASIS_ASK PriceLinkBasis = "ASK"
	PRICELINKBASIS_ASK_BID PriceLinkBasis = "ASK_BID"
	PRICELINKBASIS_MARK PriceLinkBasis = "MARK"
	PRICELINKBASIS_AVERAGE PriceLinkBasis = "AVERAGE"
)

// All allowed values of PriceLinkBasis enum
var AllowedPriceLinkBasisEnumValues = []PriceLinkBasis{
	"MANUAL",
	"BASE",
	"TRIGGER",
	"LAST",
	"BID",
	"ASK",
	"ASK_BID",
	"MARK",
	"AVERAGE",
}

func (v *PriceLinkBasis) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PriceLinkBasis(value)
	for _, existing := range AllowedPriceLinkBasisEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PriceLinkBasis", value)
}

// NewPriceLinkBasisFromValue returns a pointer to a valid PriceLinkBasis
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPriceLinkBasisFromValue(v string) (*PriceLinkBasis, error) {
	ev := PriceLinkBasis(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PriceLinkBasis: valid values are %v", v, AllowedPriceLinkBasisEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PriceLinkBasis) IsValid() bool {
	for _, existing := range AllowedPriceLinkBasisEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to priceLinkBasis value
func (v PriceLinkBasis) Ptr() *PriceLinkBasis {
	return &v
}

type NullablePriceLinkBasis struct {
	value *PriceLinkBasis
	isSet bool
}

func (v NullablePriceLinkBasis) Get() *PriceLinkBasis {
	return v.value
}

func (v *NullablePriceLinkBasis) Set(val *PriceLinkBasis) {
	v.value = val
	v.isSet = true
}

func (v NullablePriceLinkBasis) IsSet() bool {
	return v.isSet
}

func (v *NullablePriceLinkBasis) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePriceLinkBasis(val *PriceLinkBasis) *NullablePriceLinkBasis {
	return &NullablePriceLinkBasis{value: val, isSet: true}
}

func (v NullablePriceLinkBasis) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePriceLinkBasis) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

