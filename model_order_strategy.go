/*
Trader API - Account Access and User Preferences

Schwab Trader API access to Account, Order entry and User Preferences

API version: 1.0.0
Contact: TraderAPI@Schwab.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"time"
)

// checks if the OrderStrategy type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OrderStrategy{}

// OrderStrategy struct for OrderStrategy
type OrderStrategy struct {
	AccountNumber *string `json:"accountNumber,omitempty"`
	AdvancedOrderType *string `json:"advancedOrderType,omitempty"`
	CloseTime *time.Time `json:"closeTime,omitempty"`
	EnteredTime *time.Time `json:"enteredTime,omitempty"`
	OrderBalance *OrderBalance `json:"orderBalance,omitempty"`
	OrderStrategyType *OrderStrategyType `json:"orderStrategyType,omitempty"`
	OrderVersion *float32 `json:"orderVersion,omitempty"`
	Session *Session `json:"session,omitempty"`
	Status *ApiOrderStatus `json:"status,omitempty"`
	AllOrNone *bool `json:"allOrNone,omitempty"`
	Discretionary *bool `json:"discretionary,omitempty"`
	Duration *Duration `json:"duration,omitempty"`
	FilledQuantity *float64 `json:"filledQuantity,omitempty"`
	OrderType *OrderType `json:"orderType,omitempty"`
	OrderValue *float64 `json:"orderValue,omitempty"`
	Price *float64 `json:"price,omitempty"`
	Quantity *float64 `json:"quantity,omitempty"`
	RemainingQuantity *float64 `json:"remainingQuantity,omitempty"`
	SellNonMarginableFirst *bool `json:"sellNonMarginableFirst,omitempty"`
	SettlementInstruction *SettlementInstruction `json:"settlementInstruction,omitempty"`
	Strategy *ComplexOrderStrategyType `json:"strategy,omitempty"`
	AmountIndicator *AmountIndicator `json:"amountIndicator,omitempty"`
	OrderLegs []OrderLeg `json:"orderLegs,omitempty"`
}

// NewOrderStrategy instantiates a new OrderStrategy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOrderStrategy() *OrderStrategy {
	this := OrderStrategy{}
	return &this
}

// NewOrderStrategyWithDefaults instantiates a new OrderStrategy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOrderStrategyWithDefaults() *OrderStrategy {
	this := OrderStrategy{}
	return &this
}

// GetAccountNumber returns the AccountNumber field value if set, zero value otherwise.
func (o *OrderStrategy) GetAccountNumber() string {
	if o == nil || IsNil(o.AccountNumber) {
		var ret string
		return ret
	}
	return *o.AccountNumber
}

// GetAccountNumberOk returns a tuple with the AccountNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderStrategy) GetAccountNumberOk() (*string, bool) {
	if o == nil || IsNil(o.AccountNumber) {
		return nil, false
	}
	return o.AccountNumber, true
}

// HasAccountNumber returns a boolean if a field has been set.
func (o *OrderStrategy) HasAccountNumber() bool {
	if o != nil && !IsNil(o.AccountNumber) {
		return true
	}

	return false
}

// SetAccountNumber gets a reference to the given string and assigns it to the AccountNumber field.
func (o *OrderStrategy) SetAccountNumber(v string) {
	o.AccountNumber = &v
}

// GetAdvancedOrderType returns the AdvancedOrderType field value if set, zero value otherwise.
func (o *OrderStrategy) GetAdvancedOrderType() string {
	if o == nil || IsNil(o.AdvancedOrderType) {
		var ret string
		return ret
	}
	return *o.AdvancedOrderType
}

// GetAdvancedOrderTypeOk returns a tuple with the AdvancedOrderType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderStrategy) GetAdvancedOrderTypeOk() (*string, bool) {
	if o == nil || IsNil(o.AdvancedOrderType) {
		return nil, false
	}
	return o.AdvancedOrderType, true
}

// HasAdvancedOrderType returns a boolean if a field has been set.
func (o *OrderStrategy) HasAdvancedOrderType() bool {
	if o != nil && !IsNil(o.AdvancedOrderType) {
		return true
	}

	return false
}

// SetAdvancedOrderType gets a reference to the given string and assigns it to the AdvancedOrderType field.
func (o *OrderStrategy) SetAdvancedOrderType(v string) {
	o.AdvancedOrderType = &v
}

// GetCloseTime returns the CloseTime field value if set, zero value otherwise.
func (o *OrderStrategy) GetCloseTime() time.Time {
	if o == nil || IsNil(o.CloseTime) {
		var ret time.Time
		return ret
	}
	return *o.CloseTime
}

// GetCloseTimeOk returns a tuple with the CloseTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderStrategy) GetCloseTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CloseTime) {
		return nil, false
	}
	return o.CloseTime, true
}

// HasCloseTime returns a boolean if a field has been set.
func (o *OrderStrategy) HasCloseTime() bool {
	if o != nil && !IsNil(o.CloseTime) {
		return true
	}

	return false
}

// SetCloseTime gets a reference to the given time.Time and assigns it to the CloseTime field.
func (o *OrderStrategy) SetCloseTime(v time.Time) {
	o.CloseTime = &v
}

// GetEnteredTime returns the EnteredTime field value if set, zero value otherwise.
func (o *OrderStrategy) GetEnteredTime() time.Time {
	if o == nil || IsNil(o.EnteredTime) {
		var ret time.Time
		return ret
	}
	return *o.EnteredTime
}

// GetEnteredTimeOk returns a tuple with the EnteredTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderStrategy) GetEnteredTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.EnteredTime) {
		return nil, false
	}
	return o.EnteredTime, true
}

// HasEnteredTime returns a boolean if a field has been set.
func (o *OrderStrategy) HasEnteredTime() bool {
	if o != nil && !IsNil(o.EnteredTime) {
		return true
	}

	return false
}

// SetEnteredTime gets a reference to the given time.Time and assigns it to the EnteredTime field.
func (o *OrderStrategy) SetEnteredTime(v time.Time) {
	o.EnteredTime = &v
}

// GetOrderBalance returns the OrderBalance field value if set, zero value otherwise.
func (o *OrderStrategy) GetOrderBalance() OrderBalance {
	if o == nil || IsNil(o.OrderBalance) {
		var ret OrderBalance
		return ret
	}
	return *o.OrderBalance
}

// GetOrderBalanceOk returns a tuple with the OrderBalance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderStrategy) GetOrderBalanceOk() (*OrderBalance, bool) {
	if o == nil || IsNil(o.OrderBalance) {
		return nil, false
	}
	return o.OrderBalance, true
}

// HasOrderBalance returns a boolean if a field has been set.
func (o *OrderStrategy) HasOrderBalance() bool {
	if o != nil && !IsNil(o.OrderBalance) {
		return true
	}

	return false
}

// SetOrderBalance gets a reference to the given OrderBalance and assigns it to the OrderBalance field.
func (o *OrderStrategy) SetOrderBalance(v OrderBalance) {
	o.OrderBalance = &v
}

// GetOrderStrategyType returns the OrderStrategyType field value if set, zero value otherwise.
func (o *OrderStrategy) GetOrderStrategyType() OrderStrategyType {
	if o == nil || IsNil(o.OrderStrategyType) {
		var ret OrderStrategyType
		return ret
	}
	return *o.OrderStrategyType
}

// GetOrderStrategyTypeOk returns a tuple with the OrderStrategyType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderStrategy) GetOrderStrategyTypeOk() (*OrderStrategyType, bool) {
	if o == nil || IsNil(o.OrderStrategyType) {
		return nil, false
	}
	return o.OrderStrategyType, true
}

// HasOrderStrategyType returns a boolean if a field has been set.
func (o *OrderStrategy) HasOrderStrategyType() bool {
	if o != nil && !IsNil(o.OrderStrategyType) {
		return true
	}

	return false
}

// SetOrderStrategyType gets a reference to the given OrderStrategyType and assigns it to the OrderStrategyType field.
func (o *OrderStrategy) SetOrderStrategyType(v OrderStrategyType) {
	o.OrderStrategyType = &v
}

// GetOrderVersion returns the OrderVersion field value if set, zero value otherwise.
func (o *OrderStrategy) GetOrderVersion() float32 {
	if o == nil || IsNil(o.OrderVersion) {
		var ret float32
		return ret
	}
	return *o.OrderVersion
}

// GetOrderVersionOk returns a tuple with the OrderVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderStrategy) GetOrderVersionOk() (*float32, bool) {
	if o == nil || IsNil(o.OrderVersion) {
		return nil, false
	}
	return o.OrderVersion, true
}

// HasOrderVersion returns a boolean if a field has been set.
func (o *OrderStrategy) HasOrderVersion() bool {
	if o != nil && !IsNil(o.OrderVersion) {
		return true
	}

	return false
}

// SetOrderVersion gets a reference to the given float32 and assigns it to the OrderVersion field.
func (o *OrderStrategy) SetOrderVersion(v float32) {
	o.OrderVersion = &v
}

// GetSession returns the Session field value if set, zero value otherwise.
func (o *OrderStrategy) GetSession() Session {
	if o == nil || IsNil(o.Session) {
		var ret Session
		return ret
	}
	return *o.Session
}

// GetSessionOk returns a tuple with the Session field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderStrategy) GetSessionOk() (*Session, bool) {
	if o == nil || IsNil(o.Session) {
		return nil, false
	}
	return o.Session, true
}

// HasSession returns a boolean if a field has been set.
func (o *OrderStrategy) HasSession() bool {
	if o != nil && !IsNil(o.Session) {
		return true
	}

	return false
}

// SetSession gets a reference to the given Session and assigns it to the Session field.
func (o *OrderStrategy) SetSession(v Session) {
	o.Session = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *OrderStrategy) GetStatus() ApiOrderStatus {
	if o == nil || IsNil(o.Status) {
		var ret ApiOrderStatus
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderStrategy) GetStatusOk() (*ApiOrderStatus, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *OrderStrategy) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given ApiOrderStatus and assigns it to the Status field.
func (o *OrderStrategy) SetStatus(v ApiOrderStatus) {
	o.Status = &v
}

// GetAllOrNone returns the AllOrNone field value if set, zero value otherwise.
func (o *OrderStrategy) GetAllOrNone() bool {
	if o == nil || IsNil(o.AllOrNone) {
		var ret bool
		return ret
	}
	return *o.AllOrNone
}

// GetAllOrNoneOk returns a tuple with the AllOrNone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderStrategy) GetAllOrNoneOk() (*bool, bool) {
	if o == nil || IsNil(o.AllOrNone) {
		return nil, false
	}
	return o.AllOrNone, true
}

// HasAllOrNone returns a boolean if a field has been set.
func (o *OrderStrategy) HasAllOrNone() bool {
	if o != nil && !IsNil(o.AllOrNone) {
		return true
	}

	return false
}

// SetAllOrNone gets a reference to the given bool and assigns it to the AllOrNone field.
func (o *OrderStrategy) SetAllOrNone(v bool) {
	o.AllOrNone = &v
}

// GetDiscretionary returns the Discretionary field value if set, zero value otherwise.
func (o *OrderStrategy) GetDiscretionary() bool {
	if o == nil || IsNil(o.Discretionary) {
		var ret bool
		return ret
	}
	return *o.Discretionary
}

// GetDiscretionaryOk returns a tuple with the Discretionary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderStrategy) GetDiscretionaryOk() (*bool, bool) {
	if o == nil || IsNil(o.Discretionary) {
		return nil, false
	}
	return o.Discretionary, true
}

// HasDiscretionary returns a boolean if a field has been set.
func (o *OrderStrategy) HasDiscretionary() bool {
	if o != nil && !IsNil(o.Discretionary) {
		return true
	}

	return false
}

// SetDiscretionary gets a reference to the given bool and assigns it to the Discretionary field.
func (o *OrderStrategy) SetDiscretionary(v bool) {
	o.Discretionary = &v
}

// GetDuration returns the Duration field value if set, zero value otherwise.
func (o *OrderStrategy) GetDuration() Duration {
	if o == nil || IsNil(o.Duration) {
		var ret Duration
		return ret
	}
	return *o.Duration
}

// GetDurationOk returns a tuple with the Duration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderStrategy) GetDurationOk() (*Duration, bool) {
	if o == nil || IsNil(o.Duration) {
		return nil, false
	}
	return o.Duration, true
}

// HasDuration returns a boolean if a field has been set.
func (o *OrderStrategy) HasDuration() bool {
	if o != nil && !IsNil(o.Duration) {
		return true
	}

	return false
}

// SetDuration gets a reference to the given Duration and assigns it to the Duration field.
func (o *OrderStrategy) SetDuration(v Duration) {
	o.Duration = &v
}

// GetFilledQuantity returns the FilledQuantity field value if set, zero value otherwise.
func (o *OrderStrategy) GetFilledQuantity() float64 {
	if o == nil || IsNil(o.FilledQuantity) {
		var ret float64
		return ret
	}
	return *o.FilledQuantity
}

// GetFilledQuantityOk returns a tuple with the FilledQuantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderStrategy) GetFilledQuantityOk() (*float64, bool) {
	if o == nil || IsNil(o.FilledQuantity) {
		return nil, false
	}
	return o.FilledQuantity, true
}

// HasFilledQuantity returns a boolean if a field has been set.
func (o *OrderStrategy) HasFilledQuantity() bool {
	if o != nil && !IsNil(o.FilledQuantity) {
		return true
	}

	return false
}

// SetFilledQuantity gets a reference to the given float64 and assigns it to the FilledQuantity field.
func (o *OrderStrategy) SetFilledQuantity(v float64) {
	o.FilledQuantity = &v
}

// GetOrderType returns the OrderType field value if set, zero value otherwise.
func (o *OrderStrategy) GetOrderType() OrderType {
	if o == nil || IsNil(o.OrderType) {
		var ret OrderType
		return ret
	}
	return *o.OrderType
}

// GetOrderTypeOk returns a tuple with the OrderType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderStrategy) GetOrderTypeOk() (*OrderType, bool) {
	if o == nil || IsNil(o.OrderType) {
		return nil, false
	}
	return o.OrderType, true
}

// HasOrderType returns a boolean if a field has been set.
func (o *OrderStrategy) HasOrderType() bool {
	if o != nil && !IsNil(o.OrderType) {
		return true
	}

	return false
}

// SetOrderType gets a reference to the given OrderType and assigns it to the OrderType field.
func (o *OrderStrategy) SetOrderType(v OrderType) {
	o.OrderType = &v
}

// GetOrderValue returns the OrderValue field value if set, zero value otherwise.
func (o *OrderStrategy) GetOrderValue() float64 {
	if o == nil || IsNil(o.OrderValue) {
		var ret float64
		return ret
	}
	return *o.OrderValue
}

// GetOrderValueOk returns a tuple with the OrderValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderStrategy) GetOrderValueOk() (*float64, bool) {
	if o == nil || IsNil(o.OrderValue) {
		return nil, false
	}
	return o.OrderValue, true
}

// HasOrderValue returns a boolean if a field has been set.
func (o *OrderStrategy) HasOrderValue() bool {
	if o != nil && !IsNil(o.OrderValue) {
		return true
	}

	return false
}

// SetOrderValue gets a reference to the given float64 and assigns it to the OrderValue field.
func (o *OrderStrategy) SetOrderValue(v float64) {
	o.OrderValue = &v
}

// GetPrice returns the Price field value if set, zero value otherwise.
func (o *OrderStrategy) GetPrice() float64 {
	if o == nil || IsNil(o.Price) {
		var ret float64
		return ret
	}
	return *o.Price
}

// GetPriceOk returns a tuple with the Price field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderStrategy) GetPriceOk() (*float64, bool) {
	if o == nil || IsNil(o.Price) {
		return nil, false
	}
	return o.Price, true
}

// HasPrice returns a boolean if a field has been set.
func (o *OrderStrategy) HasPrice() bool {
	if o != nil && !IsNil(o.Price) {
		return true
	}

	return false
}

// SetPrice gets a reference to the given float64 and assigns it to the Price field.
func (o *OrderStrategy) SetPrice(v float64) {
	o.Price = &v
}

// GetQuantity returns the Quantity field value if set, zero value otherwise.
func (o *OrderStrategy) GetQuantity() float64 {
	if o == nil || IsNil(o.Quantity) {
		var ret float64
		return ret
	}
	return *o.Quantity
}

// GetQuantityOk returns a tuple with the Quantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderStrategy) GetQuantityOk() (*float64, bool) {
	if o == nil || IsNil(o.Quantity) {
		return nil, false
	}
	return o.Quantity, true
}

// HasQuantity returns a boolean if a field has been set.
func (o *OrderStrategy) HasQuantity() bool {
	if o != nil && !IsNil(o.Quantity) {
		return true
	}

	return false
}

// SetQuantity gets a reference to the given float64 and assigns it to the Quantity field.
func (o *OrderStrategy) SetQuantity(v float64) {
	o.Quantity = &v
}

// GetRemainingQuantity returns the RemainingQuantity field value if set, zero value otherwise.
func (o *OrderStrategy) GetRemainingQuantity() float64 {
	if o == nil || IsNil(o.RemainingQuantity) {
		var ret float64
		return ret
	}
	return *o.RemainingQuantity
}

// GetRemainingQuantityOk returns a tuple with the RemainingQuantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderStrategy) GetRemainingQuantityOk() (*float64, bool) {
	if o == nil || IsNil(o.RemainingQuantity) {
		return nil, false
	}
	return o.RemainingQuantity, true
}

// HasRemainingQuantity returns a boolean if a field has been set.
func (o *OrderStrategy) HasRemainingQuantity() bool {
	if o != nil && !IsNil(o.RemainingQuantity) {
		return true
	}

	return false
}

// SetRemainingQuantity gets a reference to the given float64 and assigns it to the RemainingQuantity field.
func (o *OrderStrategy) SetRemainingQuantity(v float64) {
	o.RemainingQuantity = &v
}

// GetSellNonMarginableFirst returns the SellNonMarginableFirst field value if set, zero value otherwise.
func (o *OrderStrategy) GetSellNonMarginableFirst() bool {
	if o == nil || IsNil(o.SellNonMarginableFirst) {
		var ret bool
		return ret
	}
	return *o.SellNonMarginableFirst
}

// GetSellNonMarginableFirstOk returns a tuple with the SellNonMarginableFirst field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderStrategy) GetSellNonMarginableFirstOk() (*bool, bool) {
	if o == nil || IsNil(o.SellNonMarginableFirst) {
		return nil, false
	}
	return o.SellNonMarginableFirst, true
}

// HasSellNonMarginableFirst returns a boolean if a field has been set.
func (o *OrderStrategy) HasSellNonMarginableFirst() bool {
	if o != nil && !IsNil(o.SellNonMarginableFirst) {
		return true
	}

	return false
}

// SetSellNonMarginableFirst gets a reference to the given bool and assigns it to the SellNonMarginableFirst field.
func (o *OrderStrategy) SetSellNonMarginableFirst(v bool) {
	o.SellNonMarginableFirst = &v
}

// GetSettlementInstruction returns the SettlementInstruction field value if set, zero value otherwise.
func (o *OrderStrategy) GetSettlementInstruction() SettlementInstruction {
	if o == nil || IsNil(o.SettlementInstruction) {
		var ret SettlementInstruction
		return ret
	}
	return *o.SettlementInstruction
}

// GetSettlementInstructionOk returns a tuple with the SettlementInstruction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderStrategy) GetSettlementInstructionOk() (*SettlementInstruction, bool) {
	if o == nil || IsNil(o.SettlementInstruction) {
		return nil, false
	}
	return o.SettlementInstruction, true
}

// HasSettlementInstruction returns a boolean if a field has been set.
func (o *OrderStrategy) HasSettlementInstruction() bool {
	if o != nil && !IsNil(o.SettlementInstruction) {
		return true
	}

	return false
}

// SetSettlementInstruction gets a reference to the given SettlementInstruction and assigns it to the SettlementInstruction field.
func (o *OrderStrategy) SetSettlementInstruction(v SettlementInstruction) {
	o.SettlementInstruction = &v
}

// GetStrategy returns the Strategy field value if set, zero value otherwise.
func (o *OrderStrategy) GetStrategy() ComplexOrderStrategyType {
	if o == nil || IsNil(o.Strategy) {
		var ret ComplexOrderStrategyType
		return ret
	}
	return *o.Strategy
}

// GetStrategyOk returns a tuple with the Strategy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderStrategy) GetStrategyOk() (*ComplexOrderStrategyType, bool) {
	if o == nil || IsNil(o.Strategy) {
		return nil, false
	}
	return o.Strategy, true
}

// HasStrategy returns a boolean if a field has been set.
func (o *OrderStrategy) HasStrategy() bool {
	if o != nil && !IsNil(o.Strategy) {
		return true
	}

	return false
}

// SetStrategy gets a reference to the given ComplexOrderStrategyType and assigns it to the Strategy field.
func (o *OrderStrategy) SetStrategy(v ComplexOrderStrategyType) {
	o.Strategy = &v
}

// GetAmountIndicator returns the AmountIndicator field value if set, zero value otherwise.
func (o *OrderStrategy) GetAmountIndicator() AmountIndicator {
	if o == nil || IsNil(o.AmountIndicator) {
		var ret AmountIndicator
		return ret
	}
	return *o.AmountIndicator
}

// GetAmountIndicatorOk returns a tuple with the AmountIndicator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderStrategy) GetAmountIndicatorOk() (*AmountIndicator, bool) {
	if o == nil || IsNil(o.AmountIndicator) {
		return nil, false
	}
	return o.AmountIndicator, true
}

// HasAmountIndicator returns a boolean if a field has been set.
func (o *OrderStrategy) HasAmountIndicator() bool {
	if o != nil && !IsNil(o.AmountIndicator) {
		return true
	}

	return false
}

// SetAmountIndicator gets a reference to the given AmountIndicator and assigns it to the AmountIndicator field.
func (o *OrderStrategy) SetAmountIndicator(v AmountIndicator) {
	o.AmountIndicator = &v
}

// GetOrderLegs returns the OrderLegs field value if set, zero value otherwise.
func (o *OrderStrategy) GetOrderLegs() []OrderLeg {
	if o == nil || IsNil(o.OrderLegs) {
		var ret []OrderLeg
		return ret
	}
	return o.OrderLegs
}

// GetOrderLegsOk returns a tuple with the OrderLegs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderStrategy) GetOrderLegsOk() ([]OrderLeg, bool) {
	if o == nil || IsNil(o.OrderLegs) {
		return nil, false
	}
	return o.OrderLegs, true
}

// HasOrderLegs returns a boolean if a field has been set.
func (o *OrderStrategy) HasOrderLegs() bool {
	if o != nil && !IsNil(o.OrderLegs) {
		return true
	}

	return false
}

// SetOrderLegs gets a reference to the given []OrderLeg and assigns it to the OrderLegs field.
func (o *OrderStrategy) SetOrderLegs(v []OrderLeg) {
	o.OrderLegs = v
}

func (o OrderStrategy) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OrderStrategy) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AccountNumber) {
		toSerialize["accountNumber"] = o.AccountNumber
	}
	if !IsNil(o.AdvancedOrderType) {
		toSerialize["advancedOrderType"] = o.AdvancedOrderType
	}
	if !IsNil(o.CloseTime) {
		toSerialize["closeTime"] = o.CloseTime
	}
	if !IsNil(o.EnteredTime) {
		toSerialize["enteredTime"] = o.EnteredTime
	}
	if !IsNil(o.OrderBalance) {
		toSerialize["orderBalance"] = o.OrderBalance
	}
	if !IsNil(o.OrderStrategyType) {
		toSerialize["orderStrategyType"] = o.OrderStrategyType
	}
	if !IsNil(o.OrderVersion) {
		toSerialize["orderVersion"] = o.OrderVersion
	}
	if !IsNil(o.Session) {
		toSerialize["session"] = o.Session
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.AllOrNone) {
		toSerialize["allOrNone"] = o.AllOrNone
	}
	if !IsNil(o.Discretionary) {
		toSerialize["discretionary"] = o.Discretionary
	}
	if !IsNil(o.Duration) {
		toSerialize["duration"] = o.Duration
	}
	if !IsNil(o.FilledQuantity) {
		toSerialize["filledQuantity"] = o.FilledQuantity
	}
	if !IsNil(o.OrderType) {
		toSerialize["orderType"] = o.OrderType
	}
	if !IsNil(o.OrderValue) {
		toSerialize["orderValue"] = o.OrderValue
	}
	if !IsNil(o.Price) {
		toSerialize["price"] = o.Price
	}
	if !IsNil(o.Quantity) {
		toSerialize["quantity"] = o.Quantity
	}
	if !IsNil(o.RemainingQuantity) {
		toSerialize["remainingQuantity"] = o.RemainingQuantity
	}
	if !IsNil(o.SellNonMarginableFirst) {
		toSerialize["sellNonMarginableFirst"] = o.SellNonMarginableFirst
	}
	if !IsNil(o.SettlementInstruction) {
		toSerialize["settlementInstruction"] = o.SettlementInstruction
	}
	if !IsNil(o.Strategy) {
		toSerialize["strategy"] = o.Strategy
	}
	if !IsNil(o.AmountIndicator) {
		toSerialize["amountIndicator"] = o.AmountIndicator
	}
	if !IsNil(o.OrderLegs) {
		toSerialize["orderLegs"] = o.OrderLegs
	}
	return toSerialize, nil
}

type NullableOrderStrategy struct {
	value *OrderStrategy
	isSet bool
}

func (v NullableOrderStrategy) Get() *OrderStrategy {
	return v.value
}

func (v *NullableOrderStrategy) Set(val *OrderStrategy) {
	v.value = val
	v.isSet = true
}

func (v NullableOrderStrategy) IsSet() bool {
	return v.isSet
}

func (v *NullableOrderStrategy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrderStrategy(val *OrderStrategy) *NullableOrderStrategy {
	return &NullableOrderStrategy{value: val, isSet: true}
}

func (v NullableOrderStrategy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrderStrategy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


