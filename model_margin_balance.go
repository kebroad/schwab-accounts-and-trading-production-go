/*
Trader API - Account Access and User Preferences

Schwab Trader API access to Account, Order entry and User Preferences

API version: 1.0.0
Contact: TraderAPI@Schwab.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the MarginBalance type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MarginBalance{}

// MarginBalance struct for MarginBalance
type MarginBalance struct {
	AvailableFunds *float64 `json:"availableFunds,omitempty"`
	AvailableFundsNonMarginableTrade *float64 `json:"availableFundsNonMarginableTrade,omitempty"`
	BuyingPower *float64 `json:"buyingPower,omitempty"`
	BuyingPowerNonMarginableTrade *float64 `json:"buyingPowerNonMarginableTrade,omitempty"`
	DayTradingBuyingPower *float64 `json:"dayTradingBuyingPower,omitempty"`
	DayTradingBuyingPowerCall *float64 `json:"dayTradingBuyingPowerCall,omitempty"`
	Equity *float64 `json:"equity,omitempty"`
	EquityPercentage *float64 `json:"equityPercentage,omitempty"`
	LongMarginValue *float64 `json:"longMarginValue,omitempty"`
	MaintenanceCall *float64 `json:"maintenanceCall,omitempty"`
	MaintenanceRequirement *float64 `json:"maintenanceRequirement,omitempty"`
	MarginBalance *float64 `json:"marginBalance,omitempty"`
	RegTCall *float64 `json:"regTCall,omitempty"`
	ShortBalance *float64 `json:"shortBalance,omitempty"`
	ShortMarginValue *float64 `json:"shortMarginValue,omitempty"`
	Sma *float64 `json:"sma,omitempty"`
	IsInCall *float64 `json:"isInCall,omitempty"`
	StockBuyingPower *float64 `json:"stockBuyingPower,omitempty"`
	OptionBuyingPower *float64 `json:"optionBuyingPower,omitempty"`
}

// NewMarginBalance instantiates a new MarginBalance object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMarginBalance() *MarginBalance {
	this := MarginBalance{}
	return &this
}

// NewMarginBalanceWithDefaults instantiates a new MarginBalance object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMarginBalanceWithDefaults() *MarginBalance {
	this := MarginBalance{}
	return &this
}

// GetAvailableFunds returns the AvailableFunds field value if set, zero value otherwise.
func (o *MarginBalance) GetAvailableFunds() float64 {
	if o == nil || IsNil(o.AvailableFunds) {
		var ret float64
		return ret
	}
	return *o.AvailableFunds
}

// GetAvailableFundsOk returns a tuple with the AvailableFunds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MarginBalance) GetAvailableFundsOk() (*float64, bool) {
	if o == nil || IsNil(o.AvailableFunds) {
		return nil, false
	}
	return o.AvailableFunds, true
}

// HasAvailableFunds returns a boolean if a field has been set.
func (o *MarginBalance) HasAvailableFunds() bool {
	if o != nil && !IsNil(o.AvailableFunds) {
		return true
	}

	return false
}

// SetAvailableFunds gets a reference to the given float64 and assigns it to the AvailableFunds field.
func (o *MarginBalance) SetAvailableFunds(v float64) {
	o.AvailableFunds = &v
}

// GetAvailableFundsNonMarginableTrade returns the AvailableFundsNonMarginableTrade field value if set, zero value otherwise.
func (o *MarginBalance) GetAvailableFundsNonMarginableTrade() float64 {
	if o == nil || IsNil(o.AvailableFundsNonMarginableTrade) {
		var ret float64
		return ret
	}
	return *o.AvailableFundsNonMarginableTrade
}

// GetAvailableFundsNonMarginableTradeOk returns a tuple with the AvailableFundsNonMarginableTrade field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MarginBalance) GetAvailableFundsNonMarginableTradeOk() (*float64, bool) {
	if o == nil || IsNil(o.AvailableFundsNonMarginableTrade) {
		return nil, false
	}
	return o.AvailableFundsNonMarginableTrade, true
}

// HasAvailableFundsNonMarginableTrade returns a boolean if a field has been set.
func (o *MarginBalance) HasAvailableFundsNonMarginableTrade() bool {
	if o != nil && !IsNil(o.AvailableFundsNonMarginableTrade) {
		return true
	}

	return false
}

// SetAvailableFundsNonMarginableTrade gets a reference to the given float64 and assigns it to the AvailableFundsNonMarginableTrade field.
func (o *MarginBalance) SetAvailableFundsNonMarginableTrade(v float64) {
	o.AvailableFundsNonMarginableTrade = &v
}

// GetBuyingPower returns the BuyingPower field value if set, zero value otherwise.
func (o *MarginBalance) GetBuyingPower() float64 {
	if o == nil || IsNil(o.BuyingPower) {
		var ret float64
		return ret
	}
	return *o.BuyingPower
}

// GetBuyingPowerOk returns a tuple with the BuyingPower field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MarginBalance) GetBuyingPowerOk() (*float64, bool) {
	if o == nil || IsNil(o.BuyingPower) {
		return nil, false
	}
	return o.BuyingPower, true
}

// HasBuyingPower returns a boolean if a field has been set.
func (o *MarginBalance) HasBuyingPower() bool {
	if o != nil && !IsNil(o.BuyingPower) {
		return true
	}

	return false
}

// SetBuyingPower gets a reference to the given float64 and assigns it to the BuyingPower field.
func (o *MarginBalance) SetBuyingPower(v float64) {
	o.BuyingPower = &v
}

// GetBuyingPowerNonMarginableTrade returns the BuyingPowerNonMarginableTrade field value if set, zero value otherwise.
func (o *MarginBalance) GetBuyingPowerNonMarginableTrade() float64 {
	if o == nil || IsNil(o.BuyingPowerNonMarginableTrade) {
		var ret float64
		return ret
	}
	return *o.BuyingPowerNonMarginableTrade
}

// GetBuyingPowerNonMarginableTradeOk returns a tuple with the BuyingPowerNonMarginableTrade field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MarginBalance) GetBuyingPowerNonMarginableTradeOk() (*float64, bool) {
	if o == nil || IsNil(o.BuyingPowerNonMarginableTrade) {
		return nil, false
	}
	return o.BuyingPowerNonMarginableTrade, true
}

// HasBuyingPowerNonMarginableTrade returns a boolean if a field has been set.
func (o *MarginBalance) HasBuyingPowerNonMarginableTrade() bool {
	if o != nil && !IsNil(o.BuyingPowerNonMarginableTrade) {
		return true
	}

	return false
}

// SetBuyingPowerNonMarginableTrade gets a reference to the given float64 and assigns it to the BuyingPowerNonMarginableTrade field.
func (o *MarginBalance) SetBuyingPowerNonMarginableTrade(v float64) {
	o.BuyingPowerNonMarginableTrade = &v
}

// GetDayTradingBuyingPower returns the DayTradingBuyingPower field value if set, zero value otherwise.
func (o *MarginBalance) GetDayTradingBuyingPower() float64 {
	if o == nil || IsNil(o.DayTradingBuyingPower) {
		var ret float64
		return ret
	}
	return *o.DayTradingBuyingPower
}

// GetDayTradingBuyingPowerOk returns a tuple with the DayTradingBuyingPower field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MarginBalance) GetDayTradingBuyingPowerOk() (*float64, bool) {
	if o == nil || IsNil(o.DayTradingBuyingPower) {
		return nil, false
	}
	return o.DayTradingBuyingPower, true
}

// HasDayTradingBuyingPower returns a boolean if a field has been set.
func (o *MarginBalance) HasDayTradingBuyingPower() bool {
	if o != nil && !IsNil(o.DayTradingBuyingPower) {
		return true
	}

	return false
}

// SetDayTradingBuyingPower gets a reference to the given float64 and assigns it to the DayTradingBuyingPower field.
func (o *MarginBalance) SetDayTradingBuyingPower(v float64) {
	o.DayTradingBuyingPower = &v
}

// GetDayTradingBuyingPowerCall returns the DayTradingBuyingPowerCall field value if set, zero value otherwise.
func (o *MarginBalance) GetDayTradingBuyingPowerCall() float64 {
	if o == nil || IsNil(o.DayTradingBuyingPowerCall) {
		var ret float64
		return ret
	}
	return *o.DayTradingBuyingPowerCall
}

// GetDayTradingBuyingPowerCallOk returns a tuple with the DayTradingBuyingPowerCall field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MarginBalance) GetDayTradingBuyingPowerCallOk() (*float64, bool) {
	if o == nil || IsNil(o.DayTradingBuyingPowerCall) {
		return nil, false
	}
	return o.DayTradingBuyingPowerCall, true
}

// HasDayTradingBuyingPowerCall returns a boolean if a field has been set.
func (o *MarginBalance) HasDayTradingBuyingPowerCall() bool {
	if o != nil && !IsNil(o.DayTradingBuyingPowerCall) {
		return true
	}

	return false
}

// SetDayTradingBuyingPowerCall gets a reference to the given float64 and assigns it to the DayTradingBuyingPowerCall field.
func (o *MarginBalance) SetDayTradingBuyingPowerCall(v float64) {
	o.DayTradingBuyingPowerCall = &v
}

// GetEquity returns the Equity field value if set, zero value otherwise.
func (o *MarginBalance) GetEquity() float64 {
	if o == nil || IsNil(o.Equity) {
		var ret float64
		return ret
	}
	return *o.Equity
}

// GetEquityOk returns a tuple with the Equity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MarginBalance) GetEquityOk() (*float64, bool) {
	if o == nil || IsNil(o.Equity) {
		return nil, false
	}
	return o.Equity, true
}

// HasEquity returns a boolean if a field has been set.
func (o *MarginBalance) HasEquity() bool {
	if o != nil && !IsNil(o.Equity) {
		return true
	}

	return false
}

// SetEquity gets a reference to the given float64 and assigns it to the Equity field.
func (o *MarginBalance) SetEquity(v float64) {
	o.Equity = &v
}

// GetEquityPercentage returns the EquityPercentage field value if set, zero value otherwise.
func (o *MarginBalance) GetEquityPercentage() float64 {
	if o == nil || IsNil(o.EquityPercentage) {
		var ret float64
		return ret
	}
	return *o.EquityPercentage
}

// GetEquityPercentageOk returns a tuple with the EquityPercentage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MarginBalance) GetEquityPercentageOk() (*float64, bool) {
	if o == nil || IsNil(o.EquityPercentage) {
		return nil, false
	}
	return o.EquityPercentage, true
}

// HasEquityPercentage returns a boolean if a field has been set.
func (o *MarginBalance) HasEquityPercentage() bool {
	if o != nil && !IsNil(o.EquityPercentage) {
		return true
	}

	return false
}

// SetEquityPercentage gets a reference to the given float64 and assigns it to the EquityPercentage field.
func (o *MarginBalance) SetEquityPercentage(v float64) {
	o.EquityPercentage = &v
}

// GetLongMarginValue returns the LongMarginValue field value if set, zero value otherwise.
func (o *MarginBalance) GetLongMarginValue() float64 {
	if o == nil || IsNil(o.LongMarginValue) {
		var ret float64
		return ret
	}
	return *o.LongMarginValue
}

// GetLongMarginValueOk returns a tuple with the LongMarginValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MarginBalance) GetLongMarginValueOk() (*float64, bool) {
	if o == nil || IsNil(o.LongMarginValue) {
		return nil, false
	}
	return o.LongMarginValue, true
}

// HasLongMarginValue returns a boolean if a field has been set.
func (o *MarginBalance) HasLongMarginValue() bool {
	if o != nil && !IsNil(o.LongMarginValue) {
		return true
	}

	return false
}

// SetLongMarginValue gets a reference to the given float64 and assigns it to the LongMarginValue field.
func (o *MarginBalance) SetLongMarginValue(v float64) {
	o.LongMarginValue = &v
}

// GetMaintenanceCall returns the MaintenanceCall field value if set, zero value otherwise.
func (o *MarginBalance) GetMaintenanceCall() float64 {
	if o == nil || IsNil(o.MaintenanceCall) {
		var ret float64
		return ret
	}
	return *o.MaintenanceCall
}

// GetMaintenanceCallOk returns a tuple with the MaintenanceCall field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MarginBalance) GetMaintenanceCallOk() (*float64, bool) {
	if o == nil || IsNil(o.MaintenanceCall) {
		return nil, false
	}
	return o.MaintenanceCall, true
}

// HasMaintenanceCall returns a boolean if a field has been set.
func (o *MarginBalance) HasMaintenanceCall() bool {
	if o != nil && !IsNil(o.MaintenanceCall) {
		return true
	}

	return false
}

// SetMaintenanceCall gets a reference to the given float64 and assigns it to the MaintenanceCall field.
func (o *MarginBalance) SetMaintenanceCall(v float64) {
	o.MaintenanceCall = &v
}

// GetMaintenanceRequirement returns the MaintenanceRequirement field value if set, zero value otherwise.
func (o *MarginBalance) GetMaintenanceRequirement() float64 {
	if o == nil || IsNil(o.MaintenanceRequirement) {
		var ret float64
		return ret
	}
	return *o.MaintenanceRequirement
}

// GetMaintenanceRequirementOk returns a tuple with the MaintenanceRequirement field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MarginBalance) GetMaintenanceRequirementOk() (*float64, bool) {
	if o == nil || IsNil(o.MaintenanceRequirement) {
		return nil, false
	}
	return o.MaintenanceRequirement, true
}

// HasMaintenanceRequirement returns a boolean if a field has been set.
func (o *MarginBalance) HasMaintenanceRequirement() bool {
	if o != nil && !IsNil(o.MaintenanceRequirement) {
		return true
	}

	return false
}

// SetMaintenanceRequirement gets a reference to the given float64 and assigns it to the MaintenanceRequirement field.
func (o *MarginBalance) SetMaintenanceRequirement(v float64) {
	o.MaintenanceRequirement = &v
}

// GetMarginBalance returns the MarginBalance field value if set, zero value otherwise.
func (o *MarginBalance) GetMarginBalance() float64 {
	if o == nil || IsNil(o.MarginBalance) {
		var ret float64
		return ret
	}
	return *o.MarginBalance
}

// GetMarginBalanceOk returns a tuple with the MarginBalance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MarginBalance) GetMarginBalanceOk() (*float64, bool) {
	if o == nil || IsNil(o.MarginBalance) {
		return nil, false
	}
	return o.MarginBalance, true
}

// HasMarginBalance returns a boolean if a field has been set.
func (o *MarginBalance) HasMarginBalance() bool {
	if o != nil && !IsNil(o.MarginBalance) {
		return true
	}

	return false
}

// SetMarginBalance gets a reference to the given float64 and assigns it to the MarginBalance field.
func (o *MarginBalance) SetMarginBalance(v float64) {
	o.MarginBalance = &v
}

// GetRegTCall returns the RegTCall field value if set, zero value otherwise.
func (o *MarginBalance) GetRegTCall() float64 {
	if o == nil || IsNil(o.RegTCall) {
		var ret float64
		return ret
	}
	return *o.RegTCall
}

// GetRegTCallOk returns a tuple with the RegTCall field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MarginBalance) GetRegTCallOk() (*float64, bool) {
	if o == nil || IsNil(o.RegTCall) {
		return nil, false
	}
	return o.RegTCall, true
}

// HasRegTCall returns a boolean if a field has been set.
func (o *MarginBalance) HasRegTCall() bool {
	if o != nil && !IsNil(o.RegTCall) {
		return true
	}

	return false
}

// SetRegTCall gets a reference to the given float64 and assigns it to the RegTCall field.
func (o *MarginBalance) SetRegTCall(v float64) {
	o.RegTCall = &v
}

// GetShortBalance returns the ShortBalance field value if set, zero value otherwise.
func (o *MarginBalance) GetShortBalance() float64 {
	if o == nil || IsNil(o.ShortBalance) {
		var ret float64
		return ret
	}
	return *o.ShortBalance
}

// GetShortBalanceOk returns a tuple with the ShortBalance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MarginBalance) GetShortBalanceOk() (*float64, bool) {
	if o == nil || IsNil(o.ShortBalance) {
		return nil, false
	}
	return o.ShortBalance, true
}

// HasShortBalance returns a boolean if a field has been set.
func (o *MarginBalance) HasShortBalance() bool {
	if o != nil && !IsNil(o.ShortBalance) {
		return true
	}

	return false
}

// SetShortBalance gets a reference to the given float64 and assigns it to the ShortBalance field.
func (o *MarginBalance) SetShortBalance(v float64) {
	o.ShortBalance = &v
}

// GetShortMarginValue returns the ShortMarginValue field value if set, zero value otherwise.
func (o *MarginBalance) GetShortMarginValue() float64 {
	if o == nil || IsNil(o.ShortMarginValue) {
		var ret float64
		return ret
	}
	return *o.ShortMarginValue
}

// GetShortMarginValueOk returns a tuple with the ShortMarginValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MarginBalance) GetShortMarginValueOk() (*float64, bool) {
	if o == nil || IsNil(o.ShortMarginValue) {
		return nil, false
	}
	return o.ShortMarginValue, true
}

// HasShortMarginValue returns a boolean if a field has been set.
func (o *MarginBalance) HasShortMarginValue() bool {
	if o != nil && !IsNil(o.ShortMarginValue) {
		return true
	}

	return false
}

// SetShortMarginValue gets a reference to the given float64 and assigns it to the ShortMarginValue field.
func (o *MarginBalance) SetShortMarginValue(v float64) {
	o.ShortMarginValue = &v
}

// GetSma returns the Sma field value if set, zero value otherwise.
func (o *MarginBalance) GetSma() float64 {
	if o == nil || IsNil(o.Sma) {
		var ret float64
		return ret
	}
	return *o.Sma
}

// GetSmaOk returns a tuple with the Sma field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MarginBalance) GetSmaOk() (*float64, bool) {
	if o == nil || IsNil(o.Sma) {
		return nil, false
	}
	return o.Sma, true
}

// HasSma returns a boolean if a field has been set.
func (o *MarginBalance) HasSma() bool {
	if o != nil && !IsNil(o.Sma) {
		return true
	}

	return false
}

// SetSma gets a reference to the given float64 and assigns it to the Sma field.
func (o *MarginBalance) SetSma(v float64) {
	o.Sma = &v
}

// GetIsInCall returns the IsInCall field value if set, zero value otherwise.
func (o *MarginBalance) GetIsInCall() float64 {
	if o == nil || IsNil(o.IsInCall) {
		var ret float64
		return ret
	}
	return *o.IsInCall
}

// GetIsInCallOk returns a tuple with the IsInCall field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MarginBalance) GetIsInCallOk() (*float64, bool) {
	if o == nil || IsNil(o.IsInCall) {
		return nil, false
	}
	return o.IsInCall, true
}

// HasIsInCall returns a boolean if a field has been set.
func (o *MarginBalance) HasIsInCall() bool {
	if o != nil && !IsNil(o.IsInCall) {
		return true
	}

	return false
}

// SetIsInCall gets a reference to the given float64 and assigns it to the IsInCall field.
func (o *MarginBalance) SetIsInCall(v float64) {
	o.IsInCall = &v
}

// GetStockBuyingPower returns the StockBuyingPower field value if set, zero value otherwise.
func (o *MarginBalance) GetStockBuyingPower() float64 {
	if o == nil || IsNil(o.StockBuyingPower) {
		var ret float64
		return ret
	}
	return *o.StockBuyingPower
}

// GetStockBuyingPowerOk returns a tuple with the StockBuyingPower field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MarginBalance) GetStockBuyingPowerOk() (*float64, bool) {
	if o == nil || IsNil(o.StockBuyingPower) {
		return nil, false
	}
	return o.StockBuyingPower, true
}

// HasStockBuyingPower returns a boolean if a field has been set.
func (o *MarginBalance) HasStockBuyingPower() bool {
	if o != nil && !IsNil(o.StockBuyingPower) {
		return true
	}

	return false
}

// SetStockBuyingPower gets a reference to the given float64 and assigns it to the StockBuyingPower field.
func (o *MarginBalance) SetStockBuyingPower(v float64) {
	o.StockBuyingPower = &v
}

// GetOptionBuyingPower returns the OptionBuyingPower field value if set, zero value otherwise.
func (o *MarginBalance) GetOptionBuyingPower() float64 {
	if o == nil || IsNil(o.OptionBuyingPower) {
		var ret float64
		return ret
	}
	return *o.OptionBuyingPower
}

// GetOptionBuyingPowerOk returns a tuple with the OptionBuyingPower field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MarginBalance) GetOptionBuyingPowerOk() (*float64, bool) {
	if o == nil || IsNil(o.OptionBuyingPower) {
		return nil, false
	}
	return o.OptionBuyingPower, true
}

// HasOptionBuyingPower returns a boolean if a field has been set.
func (o *MarginBalance) HasOptionBuyingPower() bool {
	if o != nil && !IsNil(o.OptionBuyingPower) {
		return true
	}

	return false
}

// SetOptionBuyingPower gets a reference to the given float64 and assigns it to the OptionBuyingPower field.
func (o *MarginBalance) SetOptionBuyingPower(v float64) {
	o.OptionBuyingPower = &v
}

func (o MarginBalance) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MarginBalance) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AvailableFunds) {
		toSerialize["availableFunds"] = o.AvailableFunds
	}
	if !IsNil(o.AvailableFundsNonMarginableTrade) {
		toSerialize["availableFundsNonMarginableTrade"] = o.AvailableFundsNonMarginableTrade
	}
	if !IsNil(o.BuyingPower) {
		toSerialize["buyingPower"] = o.BuyingPower
	}
	if !IsNil(o.BuyingPowerNonMarginableTrade) {
		toSerialize["buyingPowerNonMarginableTrade"] = o.BuyingPowerNonMarginableTrade
	}
	if !IsNil(o.DayTradingBuyingPower) {
		toSerialize["dayTradingBuyingPower"] = o.DayTradingBuyingPower
	}
	if !IsNil(o.DayTradingBuyingPowerCall) {
		toSerialize["dayTradingBuyingPowerCall"] = o.DayTradingBuyingPowerCall
	}
	if !IsNil(o.Equity) {
		toSerialize["equity"] = o.Equity
	}
	if !IsNil(o.EquityPercentage) {
		toSerialize["equityPercentage"] = o.EquityPercentage
	}
	if !IsNil(o.LongMarginValue) {
		toSerialize["longMarginValue"] = o.LongMarginValue
	}
	if !IsNil(o.MaintenanceCall) {
		toSerialize["maintenanceCall"] = o.MaintenanceCall
	}
	if !IsNil(o.MaintenanceRequirement) {
		toSerialize["maintenanceRequirement"] = o.MaintenanceRequirement
	}
	if !IsNil(o.MarginBalance) {
		toSerialize["marginBalance"] = o.MarginBalance
	}
	if !IsNil(o.RegTCall) {
		toSerialize["regTCall"] = o.RegTCall
	}
	if !IsNil(o.ShortBalance) {
		toSerialize["shortBalance"] = o.ShortBalance
	}
	if !IsNil(o.ShortMarginValue) {
		toSerialize["shortMarginValue"] = o.ShortMarginValue
	}
	if !IsNil(o.Sma) {
		toSerialize["sma"] = o.Sma
	}
	if !IsNil(o.IsInCall) {
		toSerialize["isInCall"] = o.IsInCall
	}
	if !IsNil(o.StockBuyingPower) {
		toSerialize["stockBuyingPower"] = o.StockBuyingPower
	}
	if !IsNil(o.OptionBuyingPower) {
		toSerialize["optionBuyingPower"] = o.OptionBuyingPower
	}
	return toSerialize, nil
}

type NullableMarginBalance struct {
	value *MarginBalance
	isSet bool
}

func (v NullableMarginBalance) Get() *MarginBalance {
	return v.value
}

func (v *NullableMarginBalance) Set(val *MarginBalance) {
	v.value = val
	v.isSet = true
}

func (v NullableMarginBalance) IsSet() bool {
	return v.isSet
}

func (v *NullableMarginBalance) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMarginBalance(val *MarginBalance) *NullableMarginBalance {
	return &NullableMarginBalance{value: val, isSet: true}
}

func (v NullableMarginBalance) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMarginBalance) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


