/*
Trader API - Account Access and User Preferences

Schwab Trader API access to Account, Order entry and User Preferences

API version: 1.0.0
Contact: TraderAPI@Schwab.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the CommissionAndFee type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CommissionAndFee{}

// CommissionAndFee struct for CommissionAndFee
type CommissionAndFee struct {
	Commission *Commission `json:"commission,omitempty"`
	Fee *Fees `json:"fee,omitempty"`
	TrueCommission *Commission `json:"trueCommission,omitempty"`
}

// NewCommissionAndFee instantiates a new CommissionAndFee object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCommissionAndFee() *CommissionAndFee {
	this := CommissionAndFee{}
	return &this
}

// NewCommissionAndFeeWithDefaults instantiates a new CommissionAndFee object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommissionAndFeeWithDefaults() *CommissionAndFee {
	this := CommissionAndFee{}
	return &this
}

// GetCommission returns the Commission field value if set, zero value otherwise.
func (o *CommissionAndFee) GetCommission() Commission {
	if o == nil || IsNil(o.Commission) {
		var ret Commission
		return ret
	}
	return *o.Commission
}

// GetCommissionOk returns a tuple with the Commission field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommissionAndFee) GetCommissionOk() (*Commission, bool) {
	if o == nil || IsNil(o.Commission) {
		return nil, false
	}
	return o.Commission, true
}

// HasCommission returns a boolean if a field has been set.
func (o *CommissionAndFee) HasCommission() bool {
	if o != nil && !IsNil(o.Commission) {
		return true
	}

	return false
}

// SetCommission gets a reference to the given Commission and assigns it to the Commission field.
func (o *CommissionAndFee) SetCommission(v Commission) {
	o.Commission = &v
}

// GetFee returns the Fee field value if set, zero value otherwise.
func (o *CommissionAndFee) GetFee() Fees {
	if o == nil || IsNil(o.Fee) {
		var ret Fees
		return ret
	}
	return *o.Fee
}

// GetFeeOk returns a tuple with the Fee field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommissionAndFee) GetFeeOk() (*Fees, bool) {
	if o == nil || IsNil(o.Fee) {
		return nil, false
	}
	return o.Fee, true
}

// HasFee returns a boolean if a field has been set.
func (o *CommissionAndFee) HasFee() bool {
	if o != nil && !IsNil(o.Fee) {
		return true
	}

	return false
}

// SetFee gets a reference to the given Fees and assigns it to the Fee field.
func (o *CommissionAndFee) SetFee(v Fees) {
	o.Fee = &v
}

// GetTrueCommission returns the TrueCommission field value if set, zero value otherwise.
func (o *CommissionAndFee) GetTrueCommission() Commission {
	if o == nil || IsNil(o.TrueCommission) {
		var ret Commission
		return ret
	}
	return *o.TrueCommission
}

// GetTrueCommissionOk returns a tuple with the TrueCommission field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommissionAndFee) GetTrueCommissionOk() (*Commission, bool) {
	if o == nil || IsNil(o.TrueCommission) {
		return nil, false
	}
	return o.TrueCommission, true
}

// HasTrueCommission returns a boolean if a field has been set.
func (o *CommissionAndFee) HasTrueCommission() bool {
	if o != nil && !IsNil(o.TrueCommission) {
		return true
	}

	return false
}

// SetTrueCommission gets a reference to the given Commission and assigns it to the TrueCommission field.
func (o *CommissionAndFee) SetTrueCommission(v Commission) {
	o.TrueCommission = &v
}

func (o CommissionAndFee) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CommissionAndFee) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Commission) {
		toSerialize["commission"] = o.Commission
	}
	if !IsNil(o.Fee) {
		toSerialize["fee"] = o.Fee
	}
	if !IsNil(o.TrueCommission) {
		toSerialize["trueCommission"] = o.TrueCommission
	}
	return toSerialize, nil
}

type NullableCommissionAndFee struct {
	value *CommissionAndFee
	isSet bool
}

func (v NullableCommissionAndFee) Get() *CommissionAndFee {
	return v.value
}

func (v *NullableCommissionAndFee) Set(val *CommissionAndFee) {
	v.value = val
	v.isSet = true
}

func (v NullableCommissionAndFee) IsSet() bool {
	return v.isSet
}

func (v *NullableCommissionAndFee) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommissionAndFee(val *CommissionAndFee) *NullableCommissionAndFee {
	return &NullableCommissionAndFee{value: val, isSet: true}
}

func (v NullableCommissionAndFee) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommissionAndFee) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


