/*
Trader API - Account Access and User Preferences

Schwab Trader API access to Account, Order entry and User Preferences

API version: 1.0.0
Contact: TraderAPI@Schwab.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
)

// SettlementInstruction the model 'SettlementInstruction'
type SettlementInstruction string

// List of settlementInstruction
const (
	SETTLEMENTINSTRUCTION_REGULAR SettlementInstruction = "REGULAR"
	SETTLEMENTINSTRUCTION_CASH SettlementInstruction = "CASH"
	SETTLEMENTINSTRUCTION_NEXT_DAY SettlementInstruction = "NEXT_DAY"
	SETTLEMENTINSTRUCTION_UNKNOWN SettlementInstruction = "UNKNOWN"
)

// All allowed values of SettlementInstruction enum
var AllowedSettlementInstructionEnumValues = []SettlementInstruction{
	"REGULAR",
	"CASH",
	"NEXT_DAY",
	"UNKNOWN",
}

func (v *SettlementInstruction) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SettlementInstruction(value)
	for _, existing := range AllowedSettlementInstructionEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SettlementInstruction", value)
}

// NewSettlementInstructionFromValue returns a pointer to a valid SettlementInstruction
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSettlementInstructionFromValue(v string) (*SettlementInstruction, error) {
	ev := SettlementInstruction(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SettlementInstruction: valid values are %v", v, AllowedSettlementInstructionEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SettlementInstruction) IsValid() bool {
	for _, existing := range AllowedSettlementInstructionEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to settlementInstruction value
func (v SettlementInstruction) Ptr() *SettlementInstruction {
	return &v
}

type NullableSettlementInstruction struct {
	value *SettlementInstruction
	isSet bool
}

func (v NullableSettlementInstruction) Get() *SettlementInstruction {
	return v.value
}

func (v *NullableSettlementInstruction) Set(val *SettlementInstruction) {
	v.value = val
	v.isSet = true
}

func (v NullableSettlementInstruction) IsSet() bool {
	return v.isSet
}

func (v *NullableSettlementInstruction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSettlementInstruction(val *SettlementInstruction) *NullableSettlementInstruction {
	return &NullableSettlementInstruction{value: val, isSet: true}
}

func (v NullableSettlementInstruction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSettlementInstruction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

