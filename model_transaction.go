/*
Trader API - Account Access and User Preferences

Schwab Trader API access to Account, Order entry and User Preferences

API version: 1.0.0
Contact: TraderAPI@Schwab.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"time"
)

// checks if the Transaction type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Transaction{}

// Transaction struct for Transaction
type Transaction struct {
	ActivityId *int64 `json:"activityId,omitempty"`
	Time *time.Time `json:"time,omitempty"`
	User *UserDetails `json:"user,omitempty"`
	Description *string `json:"description,omitempty"`
	AccountNumber *string `json:"accountNumber,omitempty"`
	Type *TransactionType `json:"type,omitempty"`
	Status *string `json:"status,omitempty"`
	SubAccount *string `json:"subAccount,omitempty"`
	TradeDate *time.Time `json:"tradeDate,omitempty"`
	SettlementDate *time.Time `json:"settlementDate,omitempty"`
	PositionId *int64 `json:"positionId,omitempty"`
	OrderId *int64 `json:"orderId,omitempty"`
	NetAmount *float64 `json:"netAmount,omitempty"`
	ActivityType *string `json:"activityType,omitempty"`
	TransferItems []TransferItem `json:"transferItems,omitempty"`
}

// NewTransaction instantiates a new Transaction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransaction() *Transaction {
	this := Transaction{}
	return &this
}

// NewTransactionWithDefaults instantiates a new Transaction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransactionWithDefaults() *Transaction {
	this := Transaction{}
	return &this
}

// GetActivityId returns the ActivityId field value if set, zero value otherwise.
func (o *Transaction) GetActivityId() int64 {
	if o == nil || IsNil(o.ActivityId) {
		var ret int64
		return ret
	}
	return *o.ActivityId
}

// GetActivityIdOk returns a tuple with the ActivityId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transaction) GetActivityIdOk() (*int64, bool) {
	if o == nil || IsNil(o.ActivityId) {
		return nil, false
	}
	return o.ActivityId, true
}

// HasActivityId returns a boolean if a field has been set.
func (o *Transaction) HasActivityId() bool {
	if o != nil && !IsNil(o.ActivityId) {
		return true
	}

	return false
}

// SetActivityId gets a reference to the given int64 and assigns it to the ActivityId field.
func (o *Transaction) SetActivityId(v int64) {
	o.ActivityId = &v
}

// GetTime returns the Time field value if set, zero value otherwise.
func (o *Transaction) GetTime() time.Time {
	if o == nil || IsNil(o.Time) {
		var ret time.Time
		return ret
	}
	return *o.Time
}

// GetTimeOk returns a tuple with the Time field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transaction) GetTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Time) {
		return nil, false
	}
	return o.Time, true
}

// HasTime returns a boolean if a field has been set.
func (o *Transaction) HasTime() bool {
	if o != nil && !IsNil(o.Time) {
		return true
	}

	return false
}

// SetTime gets a reference to the given time.Time and assigns it to the Time field.
func (o *Transaction) SetTime(v time.Time) {
	o.Time = &v
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *Transaction) GetUser() UserDetails {
	if o == nil || IsNil(o.User) {
		var ret UserDetails
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transaction) GetUserOk() (*UserDetails, bool) {
	if o == nil || IsNil(o.User) {
		return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *Transaction) HasUser() bool {
	if o != nil && !IsNil(o.User) {
		return true
	}

	return false
}

// SetUser gets a reference to the given UserDetails and assigns it to the User field.
func (o *Transaction) SetUser(v UserDetails) {
	o.User = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Transaction) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transaction) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Transaction) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Transaction) SetDescription(v string) {
	o.Description = &v
}

// GetAccountNumber returns the AccountNumber field value if set, zero value otherwise.
func (o *Transaction) GetAccountNumber() string {
	if o == nil || IsNil(o.AccountNumber) {
		var ret string
		return ret
	}
	return *o.AccountNumber
}

// GetAccountNumberOk returns a tuple with the AccountNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transaction) GetAccountNumberOk() (*string, bool) {
	if o == nil || IsNil(o.AccountNumber) {
		return nil, false
	}
	return o.AccountNumber, true
}

// HasAccountNumber returns a boolean if a field has been set.
func (o *Transaction) HasAccountNumber() bool {
	if o != nil && !IsNil(o.AccountNumber) {
		return true
	}

	return false
}

// SetAccountNumber gets a reference to the given string and assigns it to the AccountNumber field.
func (o *Transaction) SetAccountNumber(v string) {
	o.AccountNumber = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Transaction) GetType() TransactionType {
	if o == nil || IsNil(o.Type) {
		var ret TransactionType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transaction) GetTypeOk() (*TransactionType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Transaction) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given TransactionType and assigns it to the Type field.
func (o *Transaction) SetType(v TransactionType) {
	o.Type = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *Transaction) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transaction) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *Transaction) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *Transaction) SetStatus(v string) {
	o.Status = &v
}

// GetSubAccount returns the SubAccount field value if set, zero value otherwise.
func (o *Transaction) GetSubAccount() string {
	if o == nil || IsNil(o.SubAccount) {
		var ret string
		return ret
	}
	return *o.SubAccount
}

// GetSubAccountOk returns a tuple with the SubAccount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transaction) GetSubAccountOk() (*string, bool) {
	if o == nil || IsNil(o.SubAccount) {
		return nil, false
	}
	return o.SubAccount, true
}

// HasSubAccount returns a boolean if a field has been set.
func (o *Transaction) HasSubAccount() bool {
	if o != nil && !IsNil(o.SubAccount) {
		return true
	}

	return false
}

// SetSubAccount gets a reference to the given string and assigns it to the SubAccount field.
func (o *Transaction) SetSubAccount(v string) {
	o.SubAccount = &v
}

// GetTradeDate returns the TradeDate field value if set, zero value otherwise.
func (o *Transaction) GetTradeDate() time.Time {
	if o == nil || IsNil(o.TradeDate) {
		var ret time.Time
		return ret
	}
	return *o.TradeDate
}

// GetTradeDateOk returns a tuple with the TradeDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transaction) GetTradeDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.TradeDate) {
		return nil, false
	}
	return o.TradeDate, true
}

// HasTradeDate returns a boolean if a field has been set.
func (o *Transaction) HasTradeDate() bool {
	if o != nil && !IsNil(o.TradeDate) {
		return true
	}

	return false
}

// SetTradeDate gets a reference to the given time.Time and assigns it to the TradeDate field.
func (o *Transaction) SetTradeDate(v time.Time) {
	o.TradeDate = &v
}

// GetSettlementDate returns the SettlementDate field value if set, zero value otherwise.
func (o *Transaction) GetSettlementDate() time.Time {
	if o == nil || IsNil(o.SettlementDate) {
		var ret time.Time
		return ret
	}
	return *o.SettlementDate
}

// GetSettlementDateOk returns a tuple with the SettlementDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transaction) GetSettlementDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.SettlementDate) {
		return nil, false
	}
	return o.SettlementDate, true
}

// HasSettlementDate returns a boolean if a field has been set.
func (o *Transaction) HasSettlementDate() bool {
	if o != nil && !IsNil(o.SettlementDate) {
		return true
	}

	return false
}

// SetSettlementDate gets a reference to the given time.Time and assigns it to the SettlementDate field.
func (o *Transaction) SetSettlementDate(v time.Time) {
	o.SettlementDate = &v
}

// GetPositionId returns the PositionId field value if set, zero value otherwise.
func (o *Transaction) GetPositionId() int64 {
	if o == nil || IsNil(o.PositionId) {
		var ret int64
		return ret
	}
	return *o.PositionId
}

// GetPositionIdOk returns a tuple with the PositionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transaction) GetPositionIdOk() (*int64, bool) {
	if o == nil || IsNil(o.PositionId) {
		return nil, false
	}
	return o.PositionId, true
}

// HasPositionId returns a boolean if a field has been set.
func (o *Transaction) HasPositionId() bool {
	if o != nil && !IsNil(o.PositionId) {
		return true
	}

	return false
}

// SetPositionId gets a reference to the given int64 and assigns it to the PositionId field.
func (o *Transaction) SetPositionId(v int64) {
	o.PositionId = &v
}

// GetOrderId returns the OrderId field value if set, zero value otherwise.
func (o *Transaction) GetOrderId() int64 {
	if o == nil || IsNil(o.OrderId) {
		var ret int64
		return ret
	}
	return *o.OrderId
}

// GetOrderIdOk returns a tuple with the OrderId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transaction) GetOrderIdOk() (*int64, bool) {
	if o == nil || IsNil(o.OrderId) {
		return nil, false
	}
	return o.OrderId, true
}

// HasOrderId returns a boolean if a field has been set.
func (o *Transaction) HasOrderId() bool {
	if o != nil && !IsNil(o.OrderId) {
		return true
	}

	return false
}

// SetOrderId gets a reference to the given int64 and assigns it to the OrderId field.
func (o *Transaction) SetOrderId(v int64) {
	o.OrderId = &v
}

// GetNetAmount returns the NetAmount field value if set, zero value otherwise.
func (o *Transaction) GetNetAmount() float64 {
	if o == nil || IsNil(o.NetAmount) {
		var ret float64
		return ret
	}
	return *o.NetAmount
}

// GetNetAmountOk returns a tuple with the NetAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transaction) GetNetAmountOk() (*float64, bool) {
	if o == nil || IsNil(o.NetAmount) {
		return nil, false
	}
	return o.NetAmount, true
}

// HasNetAmount returns a boolean if a field has been set.
func (o *Transaction) HasNetAmount() bool {
	if o != nil && !IsNil(o.NetAmount) {
		return true
	}

	return false
}

// SetNetAmount gets a reference to the given float64 and assigns it to the NetAmount field.
func (o *Transaction) SetNetAmount(v float64) {
	o.NetAmount = &v
}

// GetActivityType returns the ActivityType field value if set, zero value otherwise.
func (o *Transaction) GetActivityType() string {
	if o == nil || IsNil(o.ActivityType) {
		var ret string
		return ret
	}
	return *o.ActivityType
}

// GetActivityTypeOk returns a tuple with the ActivityType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transaction) GetActivityTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ActivityType) {
		return nil, false
	}
	return o.ActivityType, true
}

// HasActivityType returns a boolean if a field has been set.
func (o *Transaction) HasActivityType() bool {
	if o != nil && !IsNil(o.ActivityType) {
		return true
	}

	return false
}

// SetActivityType gets a reference to the given string and assigns it to the ActivityType field.
func (o *Transaction) SetActivityType(v string) {
	o.ActivityType = &v
}

// GetTransferItems returns the TransferItems field value if set, zero value otherwise.
func (o *Transaction) GetTransferItems() []TransferItem {
	if o == nil || IsNil(o.TransferItems) {
		var ret []TransferItem
		return ret
	}
	return o.TransferItems
}

// GetTransferItemsOk returns a tuple with the TransferItems field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transaction) GetTransferItemsOk() ([]TransferItem, bool) {
	if o == nil || IsNil(o.TransferItems) {
		return nil, false
	}
	return o.TransferItems, true
}

// HasTransferItems returns a boolean if a field has been set.
func (o *Transaction) HasTransferItems() bool {
	if o != nil && !IsNil(o.TransferItems) {
		return true
	}

	return false
}

// SetTransferItems gets a reference to the given []TransferItem and assigns it to the TransferItems field.
func (o *Transaction) SetTransferItems(v []TransferItem) {
	o.TransferItems = v
}

func (o Transaction) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Transaction) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ActivityId) {
		toSerialize["activityId"] = o.ActivityId
	}
	if !IsNil(o.Time) {
		toSerialize["time"] = o.Time
	}
	if !IsNil(o.User) {
		toSerialize["user"] = o.User
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.AccountNumber) {
		toSerialize["accountNumber"] = o.AccountNumber
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.SubAccount) {
		toSerialize["subAccount"] = o.SubAccount
	}
	if !IsNil(o.TradeDate) {
		toSerialize["tradeDate"] = o.TradeDate
	}
	if !IsNil(o.SettlementDate) {
		toSerialize["settlementDate"] = o.SettlementDate
	}
	if !IsNil(o.PositionId) {
		toSerialize["positionId"] = o.PositionId
	}
	if !IsNil(o.OrderId) {
		toSerialize["orderId"] = o.OrderId
	}
	if !IsNil(o.NetAmount) {
		toSerialize["netAmount"] = o.NetAmount
	}
	if !IsNil(o.ActivityType) {
		toSerialize["activityType"] = o.ActivityType
	}
	if !IsNil(o.TransferItems) {
		toSerialize["transferItems"] = o.TransferItems
	}
	return toSerialize, nil
}

type NullableTransaction struct {
	value *Transaction
	isSet bool
}

func (v NullableTransaction) Get() *Transaction {
	return v.value
}

func (v *NullableTransaction) Set(val *Transaction) {
	v.value = val
	v.isSet = true
}

func (v NullableTransaction) IsSet() bool {
	return v.isSet
}

func (v *NullableTransaction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransaction(val *Transaction) *NullableTransaction {
	return &NullableTransaction{value: val, isSet: true}
}

func (v NullableTransaction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransaction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


