/*
Trader API - Account Access and User Preferences

Schwab Trader API access to Account, Order entry and User Preferences

API version: 1.0.0
Contact: TraderAPI@Schwab.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the TransactionMutualFund type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TransactionMutualFund{}

// TransactionMutualFund struct for TransactionMutualFund
type TransactionMutualFund struct {
	FundFamilyName *string `json:"fundFamilyName,omitempty"`
	FundFamilySymbol *string `json:"fundFamilySymbol,omitempty"`
	FundGroup *string `json:"fundGroup,omitempty"`
	Type *string `json:"type,omitempty"`
	ExchangeCutoffTime *time.Time `json:"exchangeCutoffTime,omitempty"`
	PurchaseCutoffTime *time.Time `json:"purchaseCutoffTime,omitempty"`
	RedemptionCutoffTime *time.Time `json:"redemptionCutoffTime,omitempty"`
	AssetType string `json:"assetType"`
	Cusip *string `json:"cusip,omitempty"`
	Symbol *string `json:"symbol,omitempty"`
	Description *string `json:"description,omitempty"`
	InstrumentId *int64 `json:"instrumentId,omitempty"`
	NetChange *float64 `json:"netChange,omitempty"`
}

type _TransactionMutualFund TransactionMutualFund

// NewTransactionMutualFund instantiates a new TransactionMutualFund object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransactionMutualFund(assetType string) *TransactionMutualFund {
	this := TransactionMutualFund{}
	this.AssetType = assetType
	return &this
}

// NewTransactionMutualFundWithDefaults instantiates a new TransactionMutualFund object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransactionMutualFundWithDefaults() *TransactionMutualFund {
	this := TransactionMutualFund{}
	return &this
}

// GetFundFamilyName returns the FundFamilyName field value if set, zero value otherwise.
func (o *TransactionMutualFund) GetFundFamilyName() string {
	if o == nil || IsNil(o.FundFamilyName) {
		var ret string
		return ret
	}
	return *o.FundFamilyName
}

// GetFundFamilyNameOk returns a tuple with the FundFamilyName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionMutualFund) GetFundFamilyNameOk() (*string, bool) {
	if o == nil || IsNil(o.FundFamilyName) {
		return nil, false
	}
	return o.FundFamilyName, true
}

// HasFundFamilyName returns a boolean if a field has been set.
func (o *TransactionMutualFund) HasFundFamilyName() bool {
	if o != nil && !IsNil(o.FundFamilyName) {
		return true
	}

	return false
}

// SetFundFamilyName gets a reference to the given string and assigns it to the FundFamilyName field.
func (o *TransactionMutualFund) SetFundFamilyName(v string) {
	o.FundFamilyName = &v
}

// GetFundFamilySymbol returns the FundFamilySymbol field value if set, zero value otherwise.
func (o *TransactionMutualFund) GetFundFamilySymbol() string {
	if o == nil || IsNil(o.FundFamilySymbol) {
		var ret string
		return ret
	}
	return *o.FundFamilySymbol
}

// GetFundFamilySymbolOk returns a tuple with the FundFamilySymbol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionMutualFund) GetFundFamilySymbolOk() (*string, bool) {
	if o == nil || IsNil(o.FundFamilySymbol) {
		return nil, false
	}
	return o.FundFamilySymbol, true
}

// HasFundFamilySymbol returns a boolean if a field has been set.
func (o *TransactionMutualFund) HasFundFamilySymbol() bool {
	if o != nil && !IsNil(o.FundFamilySymbol) {
		return true
	}

	return false
}

// SetFundFamilySymbol gets a reference to the given string and assigns it to the FundFamilySymbol field.
func (o *TransactionMutualFund) SetFundFamilySymbol(v string) {
	o.FundFamilySymbol = &v
}

// GetFundGroup returns the FundGroup field value if set, zero value otherwise.
func (o *TransactionMutualFund) GetFundGroup() string {
	if o == nil || IsNil(o.FundGroup) {
		var ret string
		return ret
	}
	return *o.FundGroup
}

// GetFundGroupOk returns a tuple with the FundGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionMutualFund) GetFundGroupOk() (*string, bool) {
	if o == nil || IsNil(o.FundGroup) {
		return nil, false
	}
	return o.FundGroup, true
}

// HasFundGroup returns a boolean if a field has been set.
func (o *TransactionMutualFund) HasFundGroup() bool {
	if o != nil && !IsNil(o.FundGroup) {
		return true
	}

	return false
}

// SetFundGroup gets a reference to the given string and assigns it to the FundGroup field.
func (o *TransactionMutualFund) SetFundGroup(v string) {
	o.FundGroup = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *TransactionMutualFund) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionMutualFund) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *TransactionMutualFund) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *TransactionMutualFund) SetType(v string) {
	o.Type = &v
}

// GetExchangeCutoffTime returns the ExchangeCutoffTime field value if set, zero value otherwise.
func (o *TransactionMutualFund) GetExchangeCutoffTime() time.Time {
	if o == nil || IsNil(o.ExchangeCutoffTime) {
		var ret time.Time
		return ret
	}
	return *o.ExchangeCutoffTime
}

// GetExchangeCutoffTimeOk returns a tuple with the ExchangeCutoffTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionMutualFund) GetExchangeCutoffTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ExchangeCutoffTime) {
		return nil, false
	}
	return o.ExchangeCutoffTime, true
}

// HasExchangeCutoffTime returns a boolean if a field has been set.
func (o *TransactionMutualFund) HasExchangeCutoffTime() bool {
	if o != nil && !IsNil(o.ExchangeCutoffTime) {
		return true
	}

	return false
}

// SetExchangeCutoffTime gets a reference to the given time.Time and assigns it to the ExchangeCutoffTime field.
func (o *TransactionMutualFund) SetExchangeCutoffTime(v time.Time) {
	o.ExchangeCutoffTime = &v
}

// GetPurchaseCutoffTime returns the PurchaseCutoffTime field value if set, zero value otherwise.
func (o *TransactionMutualFund) GetPurchaseCutoffTime() time.Time {
	if o == nil || IsNil(o.PurchaseCutoffTime) {
		var ret time.Time
		return ret
	}
	return *o.PurchaseCutoffTime
}

// GetPurchaseCutoffTimeOk returns a tuple with the PurchaseCutoffTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionMutualFund) GetPurchaseCutoffTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.PurchaseCutoffTime) {
		return nil, false
	}
	return o.PurchaseCutoffTime, true
}

// HasPurchaseCutoffTime returns a boolean if a field has been set.
func (o *TransactionMutualFund) HasPurchaseCutoffTime() bool {
	if o != nil && !IsNil(o.PurchaseCutoffTime) {
		return true
	}

	return false
}

// SetPurchaseCutoffTime gets a reference to the given time.Time and assigns it to the PurchaseCutoffTime field.
func (o *TransactionMutualFund) SetPurchaseCutoffTime(v time.Time) {
	o.PurchaseCutoffTime = &v
}

// GetRedemptionCutoffTime returns the RedemptionCutoffTime field value if set, zero value otherwise.
func (o *TransactionMutualFund) GetRedemptionCutoffTime() time.Time {
	if o == nil || IsNil(o.RedemptionCutoffTime) {
		var ret time.Time
		return ret
	}
	return *o.RedemptionCutoffTime
}

// GetRedemptionCutoffTimeOk returns a tuple with the RedemptionCutoffTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionMutualFund) GetRedemptionCutoffTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.RedemptionCutoffTime) {
		return nil, false
	}
	return o.RedemptionCutoffTime, true
}

// HasRedemptionCutoffTime returns a boolean if a field has been set.
func (o *TransactionMutualFund) HasRedemptionCutoffTime() bool {
	if o != nil && !IsNil(o.RedemptionCutoffTime) {
		return true
	}

	return false
}

// SetRedemptionCutoffTime gets a reference to the given time.Time and assigns it to the RedemptionCutoffTime field.
func (o *TransactionMutualFund) SetRedemptionCutoffTime(v time.Time) {
	o.RedemptionCutoffTime = &v
}

// GetAssetType returns the AssetType field value
func (o *TransactionMutualFund) GetAssetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AssetType
}

// GetAssetTypeOk returns a tuple with the AssetType field value
// and a boolean to check if the value has been set.
func (o *TransactionMutualFund) GetAssetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AssetType, true
}

// SetAssetType sets field value
func (o *TransactionMutualFund) SetAssetType(v string) {
	o.AssetType = v
}

// GetCusip returns the Cusip field value if set, zero value otherwise.
func (o *TransactionMutualFund) GetCusip() string {
	if o == nil || IsNil(o.Cusip) {
		var ret string
		return ret
	}
	return *o.Cusip
}

// GetCusipOk returns a tuple with the Cusip field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionMutualFund) GetCusipOk() (*string, bool) {
	if o == nil || IsNil(o.Cusip) {
		return nil, false
	}
	return o.Cusip, true
}

// HasCusip returns a boolean if a field has been set.
func (o *TransactionMutualFund) HasCusip() bool {
	if o != nil && !IsNil(o.Cusip) {
		return true
	}

	return false
}

// SetCusip gets a reference to the given string and assigns it to the Cusip field.
func (o *TransactionMutualFund) SetCusip(v string) {
	o.Cusip = &v
}

// GetSymbol returns the Symbol field value if set, zero value otherwise.
func (o *TransactionMutualFund) GetSymbol() string {
	if o == nil || IsNil(o.Symbol) {
		var ret string
		return ret
	}
	return *o.Symbol
}

// GetSymbolOk returns a tuple with the Symbol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionMutualFund) GetSymbolOk() (*string, bool) {
	if o == nil || IsNil(o.Symbol) {
		return nil, false
	}
	return o.Symbol, true
}

// HasSymbol returns a boolean if a field has been set.
func (o *TransactionMutualFund) HasSymbol() bool {
	if o != nil && !IsNil(o.Symbol) {
		return true
	}

	return false
}

// SetSymbol gets a reference to the given string and assigns it to the Symbol field.
func (o *TransactionMutualFund) SetSymbol(v string) {
	o.Symbol = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *TransactionMutualFund) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionMutualFund) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *TransactionMutualFund) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *TransactionMutualFund) SetDescription(v string) {
	o.Description = &v
}

// GetInstrumentId returns the InstrumentId field value if set, zero value otherwise.
func (o *TransactionMutualFund) GetInstrumentId() int64 {
	if o == nil || IsNil(o.InstrumentId) {
		var ret int64
		return ret
	}
	return *o.InstrumentId
}

// GetInstrumentIdOk returns a tuple with the InstrumentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionMutualFund) GetInstrumentIdOk() (*int64, bool) {
	if o == nil || IsNil(o.InstrumentId) {
		return nil, false
	}
	return o.InstrumentId, true
}

// HasInstrumentId returns a boolean if a field has been set.
func (o *TransactionMutualFund) HasInstrumentId() bool {
	if o != nil && !IsNil(o.InstrumentId) {
		return true
	}

	return false
}

// SetInstrumentId gets a reference to the given int64 and assigns it to the InstrumentId field.
func (o *TransactionMutualFund) SetInstrumentId(v int64) {
	o.InstrumentId = &v
}

// GetNetChange returns the NetChange field value if set, zero value otherwise.
func (o *TransactionMutualFund) GetNetChange() float64 {
	if o == nil || IsNil(o.NetChange) {
		var ret float64
		return ret
	}
	return *o.NetChange
}

// GetNetChangeOk returns a tuple with the NetChange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionMutualFund) GetNetChangeOk() (*float64, bool) {
	if o == nil || IsNil(o.NetChange) {
		return nil, false
	}
	return o.NetChange, true
}

// HasNetChange returns a boolean if a field has been set.
func (o *TransactionMutualFund) HasNetChange() bool {
	if o != nil && !IsNil(o.NetChange) {
		return true
	}

	return false
}

// SetNetChange gets a reference to the given float64 and assigns it to the NetChange field.
func (o *TransactionMutualFund) SetNetChange(v float64) {
	o.NetChange = &v
}

func (o TransactionMutualFund) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TransactionMutualFund) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.FundFamilyName) {
		toSerialize["fundFamilyName"] = o.FundFamilyName
	}
	if !IsNil(o.FundFamilySymbol) {
		toSerialize["fundFamilySymbol"] = o.FundFamilySymbol
	}
	if !IsNil(o.FundGroup) {
		toSerialize["fundGroup"] = o.FundGroup
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.ExchangeCutoffTime) {
		toSerialize["exchangeCutoffTime"] = o.ExchangeCutoffTime
	}
	if !IsNil(o.PurchaseCutoffTime) {
		toSerialize["purchaseCutoffTime"] = o.PurchaseCutoffTime
	}
	if !IsNil(o.RedemptionCutoffTime) {
		toSerialize["redemptionCutoffTime"] = o.RedemptionCutoffTime
	}
	toSerialize["assetType"] = o.AssetType
	if !IsNil(o.Cusip) {
		toSerialize["cusip"] = o.Cusip
	}
	if !IsNil(o.Symbol) {
		toSerialize["symbol"] = o.Symbol
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.InstrumentId) {
		toSerialize["instrumentId"] = o.InstrumentId
	}
	if !IsNil(o.NetChange) {
		toSerialize["netChange"] = o.NetChange
	}
	return toSerialize, nil
}

func (o *TransactionMutualFund) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"assetType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTransactionMutualFund := _TransactionMutualFund{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTransactionMutualFund)

	if err != nil {
		return err
	}

	*o = TransactionMutualFund(varTransactionMutualFund)

	return err
}

type NullableTransactionMutualFund struct {
	value *TransactionMutualFund
	isSet bool
}

func (v NullableTransactionMutualFund) Get() *TransactionMutualFund {
	return v.value
}

func (v *NullableTransactionMutualFund) Set(val *TransactionMutualFund) {
	v.value = val
	v.isSet = true
}

func (v NullableTransactionMutualFund) IsSet() bool {
	return v.isSet
}

func (v *NullableTransactionMutualFund) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransactionMutualFund(val *TransactionMutualFund) *NullableTransactionMutualFund {
	return &NullableTransactionMutualFund{value: val, isSet: true}
}

func (v NullableTransactionMutualFund) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransactionMutualFund) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


