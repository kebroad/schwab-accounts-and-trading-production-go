/*
Trader API - Account Access and User Preferences

Schwab Trader API access to Account, Order entry and User Preferences

API version: 1.0.0
Contact: TraderAPI@Schwab.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
)

// OrderType the model 'OrderType'
type OrderType string

// List of orderType
const (
	ORDERTYPE_MARKET OrderType = "MARKET"
	ORDERTYPE_LIMIT OrderType = "LIMIT"
	ORDERTYPE_STOP OrderType = "STOP"
	ORDERTYPE_STOP_LIMIT OrderType = "STOP_LIMIT"
	ORDERTYPE_TRAILING_STOP OrderType = "TRAILING_STOP"
	ORDERTYPE_CABINET OrderType = "CABINET"
	ORDERTYPE_NON_MARKETABLE OrderType = "NON_MARKETABLE"
	ORDERTYPE_MARKET_ON_CLOSE OrderType = "MARKET_ON_CLOSE"
	ORDERTYPE_EXERCISE OrderType = "EXERCISE"
	ORDERTYPE_TRAILING_STOP_LIMIT OrderType = "TRAILING_STOP_LIMIT"
	ORDERTYPE_NET_DEBIT OrderType = "NET_DEBIT"
	ORDERTYPE_NET_CREDIT OrderType = "NET_CREDIT"
	ORDERTYPE_NET_ZERO OrderType = "NET_ZERO"
	ORDERTYPE_LIMIT_ON_CLOSE OrderType = "LIMIT_ON_CLOSE"
	ORDERTYPE_UNKNOWN OrderType = "UNKNOWN"
)

// All allowed values of OrderType enum
var AllowedOrderTypeEnumValues = []OrderType{
	"MARKET",
	"LIMIT",
	"STOP",
	"STOP_LIMIT",
	"TRAILING_STOP",
	"CABINET",
	"NON_MARKETABLE",
	"MARKET_ON_CLOSE",
	"EXERCISE",
	"TRAILING_STOP_LIMIT",
	"NET_DEBIT",
	"NET_CREDIT",
	"NET_ZERO",
	"LIMIT_ON_CLOSE",
	"UNKNOWN",
}

func (v *OrderType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := OrderType(value)
	for _, existing := range AllowedOrderTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid OrderType", value)
}

// NewOrderTypeFromValue returns a pointer to a valid OrderType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewOrderTypeFromValue(v string) (*OrderType, error) {
	ev := OrderType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for OrderType: valid values are %v", v, AllowedOrderTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v OrderType) IsValid() bool {
	for _, existing := range AllowedOrderTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to orderType value
func (v OrderType) Ptr() *OrderType {
	return &v
}

type NullableOrderType struct {
	value *OrderType
	isSet bool
}

func (v NullableOrderType) Get() *OrderType {
	return v.value
}

func (v *NullableOrderType) Set(val *OrderType) {
	v.value = val
	v.isSet = true
}

func (v NullableOrderType) IsSet() bool {
	return v.isSet
}

func (v *NullableOrderType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrderType(val *OrderType) *NullableOrderType {
	return &NullableOrderType{value: val, isSet: true}
}

func (v NullableOrderType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrderType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

