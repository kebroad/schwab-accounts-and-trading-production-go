/*
Trader API - Account Access and User Preferences

Schwab Trader API access to Account, Order entry and User Preferences

API version: 1.0.0
Contact: TraderAPI@Schwab.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
)

// RequestedDestination the model 'RequestedDestination'
type RequestedDestination string

// List of requestedDestination
const (
	REQUESTEDDESTINATION_INET RequestedDestination = "INET"
	REQUESTEDDESTINATION_ECN_ARCA RequestedDestination = "ECN_ARCA"
	REQUESTEDDESTINATION_CBOE RequestedDestination = "CBOE"
	REQUESTEDDESTINATION_AMEX RequestedDestination = "AMEX"
	REQUESTEDDESTINATION_PHLX RequestedDestination = "PHLX"
	REQUESTEDDESTINATION_ISE RequestedDestination = "ISE"
	REQUESTEDDESTINATION_BOX RequestedDestination = "BOX"
	REQUESTEDDESTINATION_NYSE RequestedDestination = "NYSE"
	REQUESTEDDESTINATION_NASDAQ RequestedDestination = "NASDAQ"
	REQUESTEDDESTINATION_BATS RequestedDestination = "BATS"
	REQUESTEDDESTINATION_C2 RequestedDestination = "C2"
	REQUESTEDDESTINATION_AUTO RequestedDestination = "AUTO"
)

// All allowed values of RequestedDestination enum
var AllowedRequestedDestinationEnumValues = []RequestedDestination{
	"INET",
	"ECN_ARCA",
	"CBOE",
	"AMEX",
	"PHLX",
	"ISE",
	"BOX",
	"NYSE",
	"NASDAQ",
	"BATS",
	"C2",
	"AUTO",
}

func (v *RequestedDestination) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RequestedDestination(value)
	for _, existing := range AllowedRequestedDestinationEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RequestedDestination", value)
}

// NewRequestedDestinationFromValue returns a pointer to a valid RequestedDestination
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRequestedDestinationFromValue(v string) (*RequestedDestination, error) {
	ev := RequestedDestination(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RequestedDestination: valid values are %v", v, AllowedRequestedDestinationEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RequestedDestination) IsValid() bool {
	for _, existing := range AllowedRequestedDestinationEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to requestedDestination value
func (v RequestedDestination) Ptr() *RequestedDestination {
	return &v
}

type NullableRequestedDestination struct {
	value *RequestedDestination
	isSet bool
}

func (v NullableRequestedDestination) Get() *RequestedDestination {
	return v.value
}

func (v *NullableRequestedDestination) Set(val *RequestedDestination) {
	v.value = val
	v.isSet = true
}

func (v NullableRequestedDestination) IsSet() bool {
	return v.isSet
}

func (v *NullableRequestedDestination) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRequestedDestination(val *RequestedDestination) *NullableRequestedDestination {
	return &NullableRequestedDestination{value: val, isSet: true}
}

func (v NullableRequestedDestination) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRequestedDestination) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

