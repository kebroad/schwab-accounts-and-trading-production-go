/*
Trader API - Account Access and User Preferences

Schwab Trader API access to Account, Order entry and User Preferences

API version: 1.0.0
Contact: TraderAPI@Schwab.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the TransactionFixedIncome type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TransactionFixedIncome{}

// TransactionFixedIncome struct for TransactionFixedIncome
type TransactionFixedIncome struct {
	Type *string `json:"type,omitempty"`
	MaturityDate *time.Time `json:"maturityDate,omitempty"`
	Factor *float64 `json:"factor,omitempty"`
	Multiplier *float64 `json:"multiplier,omitempty"`
	VariableRate *float64 `json:"variableRate,omitempty"`
	AssetType string `json:"assetType"`
	Cusip *string `json:"cusip,omitempty"`
	Symbol *string `json:"symbol,omitempty"`
	Description *string `json:"description,omitempty"`
	InstrumentId *int64 `json:"instrumentId,omitempty"`
	NetChange *float64 `json:"netChange,omitempty"`
}

type _TransactionFixedIncome TransactionFixedIncome

// NewTransactionFixedIncome instantiates a new TransactionFixedIncome object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransactionFixedIncome(assetType string) *TransactionFixedIncome {
	this := TransactionFixedIncome{}
	this.AssetType = assetType
	return &this
}

// NewTransactionFixedIncomeWithDefaults instantiates a new TransactionFixedIncome object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransactionFixedIncomeWithDefaults() *TransactionFixedIncome {
	this := TransactionFixedIncome{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *TransactionFixedIncome) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionFixedIncome) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *TransactionFixedIncome) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *TransactionFixedIncome) SetType(v string) {
	o.Type = &v
}

// GetMaturityDate returns the MaturityDate field value if set, zero value otherwise.
func (o *TransactionFixedIncome) GetMaturityDate() time.Time {
	if o == nil || IsNil(o.MaturityDate) {
		var ret time.Time
		return ret
	}
	return *o.MaturityDate
}

// GetMaturityDateOk returns a tuple with the MaturityDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionFixedIncome) GetMaturityDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.MaturityDate) {
		return nil, false
	}
	return o.MaturityDate, true
}

// HasMaturityDate returns a boolean if a field has been set.
func (o *TransactionFixedIncome) HasMaturityDate() bool {
	if o != nil && !IsNil(o.MaturityDate) {
		return true
	}

	return false
}

// SetMaturityDate gets a reference to the given time.Time and assigns it to the MaturityDate field.
func (o *TransactionFixedIncome) SetMaturityDate(v time.Time) {
	o.MaturityDate = &v
}

// GetFactor returns the Factor field value if set, zero value otherwise.
func (o *TransactionFixedIncome) GetFactor() float64 {
	if o == nil || IsNil(o.Factor) {
		var ret float64
		return ret
	}
	return *o.Factor
}

// GetFactorOk returns a tuple with the Factor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionFixedIncome) GetFactorOk() (*float64, bool) {
	if o == nil || IsNil(o.Factor) {
		return nil, false
	}
	return o.Factor, true
}

// HasFactor returns a boolean if a field has been set.
func (o *TransactionFixedIncome) HasFactor() bool {
	if o != nil && !IsNil(o.Factor) {
		return true
	}

	return false
}

// SetFactor gets a reference to the given float64 and assigns it to the Factor field.
func (o *TransactionFixedIncome) SetFactor(v float64) {
	o.Factor = &v
}

// GetMultiplier returns the Multiplier field value if set, zero value otherwise.
func (o *TransactionFixedIncome) GetMultiplier() float64 {
	if o == nil || IsNil(o.Multiplier) {
		var ret float64
		return ret
	}
	return *o.Multiplier
}

// GetMultiplierOk returns a tuple with the Multiplier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionFixedIncome) GetMultiplierOk() (*float64, bool) {
	if o == nil || IsNil(o.Multiplier) {
		return nil, false
	}
	return o.Multiplier, true
}

// HasMultiplier returns a boolean if a field has been set.
func (o *TransactionFixedIncome) HasMultiplier() bool {
	if o != nil && !IsNil(o.Multiplier) {
		return true
	}

	return false
}

// SetMultiplier gets a reference to the given float64 and assigns it to the Multiplier field.
func (o *TransactionFixedIncome) SetMultiplier(v float64) {
	o.Multiplier = &v
}

// GetVariableRate returns the VariableRate field value if set, zero value otherwise.
func (o *TransactionFixedIncome) GetVariableRate() float64 {
	if o == nil || IsNil(o.VariableRate) {
		var ret float64
		return ret
	}
	return *o.VariableRate
}

// GetVariableRateOk returns a tuple with the VariableRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionFixedIncome) GetVariableRateOk() (*float64, bool) {
	if o == nil || IsNil(o.VariableRate) {
		return nil, false
	}
	return o.VariableRate, true
}

// HasVariableRate returns a boolean if a field has been set.
func (o *TransactionFixedIncome) HasVariableRate() bool {
	if o != nil && !IsNil(o.VariableRate) {
		return true
	}

	return false
}

// SetVariableRate gets a reference to the given float64 and assigns it to the VariableRate field.
func (o *TransactionFixedIncome) SetVariableRate(v float64) {
	o.VariableRate = &v
}

// GetAssetType returns the AssetType field value
func (o *TransactionFixedIncome) GetAssetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AssetType
}

// GetAssetTypeOk returns a tuple with the AssetType field value
// and a boolean to check if the value has been set.
func (o *TransactionFixedIncome) GetAssetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AssetType, true
}

// SetAssetType sets field value
func (o *TransactionFixedIncome) SetAssetType(v string) {
	o.AssetType = v
}

// GetCusip returns the Cusip field value if set, zero value otherwise.
func (o *TransactionFixedIncome) GetCusip() string {
	if o == nil || IsNil(o.Cusip) {
		var ret string
		return ret
	}
	return *o.Cusip
}

// GetCusipOk returns a tuple with the Cusip field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionFixedIncome) GetCusipOk() (*string, bool) {
	if o == nil || IsNil(o.Cusip) {
		return nil, false
	}
	return o.Cusip, true
}

// HasCusip returns a boolean if a field has been set.
func (o *TransactionFixedIncome) HasCusip() bool {
	if o != nil && !IsNil(o.Cusip) {
		return true
	}

	return false
}

// SetCusip gets a reference to the given string and assigns it to the Cusip field.
func (o *TransactionFixedIncome) SetCusip(v string) {
	o.Cusip = &v
}

// GetSymbol returns the Symbol field value if set, zero value otherwise.
func (o *TransactionFixedIncome) GetSymbol() string {
	if o == nil || IsNil(o.Symbol) {
		var ret string
		return ret
	}
	return *o.Symbol
}

// GetSymbolOk returns a tuple with the Symbol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionFixedIncome) GetSymbolOk() (*string, bool) {
	if o == nil || IsNil(o.Symbol) {
		return nil, false
	}
	return o.Symbol, true
}

// HasSymbol returns a boolean if a field has been set.
func (o *TransactionFixedIncome) HasSymbol() bool {
	if o != nil && !IsNil(o.Symbol) {
		return true
	}

	return false
}

// SetSymbol gets a reference to the given string and assigns it to the Symbol field.
func (o *TransactionFixedIncome) SetSymbol(v string) {
	o.Symbol = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *TransactionFixedIncome) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionFixedIncome) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *TransactionFixedIncome) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *TransactionFixedIncome) SetDescription(v string) {
	o.Description = &v
}

// GetInstrumentId returns the InstrumentId field value if set, zero value otherwise.
func (o *TransactionFixedIncome) GetInstrumentId() int64 {
	if o == nil || IsNil(o.InstrumentId) {
		var ret int64
		return ret
	}
	return *o.InstrumentId
}

// GetInstrumentIdOk returns a tuple with the InstrumentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionFixedIncome) GetInstrumentIdOk() (*int64, bool) {
	if o == nil || IsNil(o.InstrumentId) {
		return nil, false
	}
	return o.InstrumentId, true
}

// HasInstrumentId returns a boolean if a field has been set.
func (o *TransactionFixedIncome) HasInstrumentId() bool {
	if o != nil && !IsNil(o.InstrumentId) {
		return true
	}

	return false
}

// SetInstrumentId gets a reference to the given int64 and assigns it to the InstrumentId field.
func (o *TransactionFixedIncome) SetInstrumentId(v int64) {
	o.InstrumentId = &v
}

// GetNetChange returns the NetChange field value if set, zero value otherwise.
func (o *TransactionFixedIncome) GetNetChange() float64 {
	if o == nil || IsNil(o.NetChange) {
		var ret float64
		return ret
	}
	return *o.NetChange
}

// GetNetChangeOk returns a tuple with the NetChange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionFixedIncome) GetNetChangeOk() (*float64, bool) {
	if o == nil || IsNil(o.NetChange) {
		return nil, false
	}
	return o.NetChange, true
}

// HasNetChange returns a boolean if a field has been set.
func (o *TransactionFixedIncome) HasNetChange() bool {
	if o != nil && !IsNil(o.NetChange) {
		return true
	}

	return false
}

// SetNetChange gets a reference to the given float64 and assigns it to the NetChange field.
func (o *TransactionFixedIncome) SetNetChange(v float64) {
	o.NetChange = &v
}

func (o TransactionFixedIncome) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TransactionFixedIncome) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.MaturityDate) {
		toSerialize["maturityDate"] = o.MaturityDate
	}
	if !IsNil(o.Factor) {
		toSerialize["factor"] = o.Factor
	}
	if !IsNil(o.Multiplier) {
		toSerialize["multiplier"] = o.Multiplier
	}
	if !IsNil(o.VariableRate) {
		toSerialize["variableRate"] = o.VariableRate
	}
	toSerialize["assetType"] = o.AssetType
	if !IsNil(o.Cusip) {
		toSerialize["cusip"] = o.Cusip
	}
	if !IsNil(o.Symbol) {
		toSerialize["symbol"] = o.Symbol
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.InstrumentId) {
		toSerialize["instrumentId"] = o.InstrumentId
	}
	if !IsNil(o.NetChange) {
		toSerialize["netChange"] = o.NetChange
	}
	return toSerialize, nil
}

func (o *TransactionFixedIncome) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"assetType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTransactionFixedIncome := _TransactionFixedIncome{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTransactionFixedIncome)

	if err != nil {
		return err
	}

	*o = TransactionFixedIncome(varTransactionFixedIncome)

	return err
}

type NullableTransactionFixedIncome struct {
	value *TransactionFixedIncome
	isSet bool
}

func (v NullableTransactionFixedIncome) Get() *TransactionFixedIncome {
	return v.value
}

func (v *NullableTransactionFixedIncome) Set(val *TransactionFixedIncome) {
	v.value = val
	v.isSet = true
}

func (v NullableTransactionFixedIncome) IsSet() bool {
	return v.isSet
}

func (v *NullableTransactionFixedIncome) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransactionFixedIncome(val *TransactionFixedIncome) *NullableTransactionFixedIncome {
	return &NullableTransactionFixedIncome{value: val, isSet: true}
}

func (v NullableTransactionFixedIncome) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransactionFixedIncome) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


