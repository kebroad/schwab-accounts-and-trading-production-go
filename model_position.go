/*
Trader API - Account Access and User Preferences

Schwab Trader API access to Account, Order entry and User Preferences

API version: 1.0.0
Contact: TraderAPI@Schwab.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the Position type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Position{}

// Position struct for Position
type Position struct {
	ShortQuantity *float64 `json:"shortQuantity,omitempty"`
	AveragePrice *float64 `json:"averagePrice,omitempty"`
	CurrentDayProfitLoss *float64 `json:"currentDayProfitLoss,omitempty"`
	CurrentDayProfitLossPercentage *float64 `json:"currentDayProfitLossPercentage,omitempty"`
	LongQuantity *float64 `json:"longQuantity,omitempty"`
	SettledLongQuantity *float64 `json:"settledLongQuantity,omitempty"`
	SettledShortQuantity *float64 `json:"settledShortQuantity,omitempty"`
	AgedQuantity *float64 `json:"agedQuantity,omitempty"`
	Instrument interface{} `json:"instrument,omitempty"`
	MarketValue *float64 `json:"marketValue,omitempty"`
	MaintenanceRequirement *float64 `json:"maintenanceRequirement,omitempty"`
	AverageLongPrice *float64 `json:"averageLongPrice,omitempty"`
	AverageShortPrice *float64 `json:"averageShortPrice,omitempty"`
	TaxLotAverageLongPrice *float64 `json:"taxLotAverageLongPrice,omitempty"`
	TaxLotAverageShortPrice *float64 `json:"taxLotAverageShortPrice,omitempty"`
	LongOpenProfitLoss *float64 `json:"longOpenProfitLoss,omitempty"`
	ShortOpenProfitLoss *float64 `json:"shortOpenProfitLoss,omitempty"`
	PreviousSessionLongQuantity *float64 `json:"previousSessionLongQuantity,omitempty"`
	PreviousSessionShortQuantity *float64 `json:"previousSessionShortQuantity,omitempty"`
	CurrentDayCost *float64 `json:"currentDayCost,omitempty"`
}

// NewPosition instantiates a new Position object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPosition() *Position {
	this := Position{}
	return &this
}

// NewPositionWithDefaults instantiates a new Position object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPositionWithDefaults() *Position {
	this := Position{}
	return &this
}

// GetShortQuantity returns the ShortQuantity field value if set, zero value otherwise.
func (o *Position) GetShortQuantity() float64 {
	if o == nil || IsNil(o.ShortQuantity) {
		var ret float64
		return ret
	}
	return *o.ShortQuantity
}

// GetShortQuantityOk returns a tuple with the ShortQuantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Position) GetShortQuantityOk() (*float64, bool) {
	if o == nil || IsNil(o.ShortQuantity) {
		return nil, false
	}
	return o.ShortQuantity, true
}

// HasShortQuantity returns a boolean if a field has been set.
func (o *Position) HasShortQuantity() bool {
	if o != nil && !IsNil(o.ShortQuantity) {
		return true
	}

	return false
}

// SetShortQuantity gets a reference to the given float64 and assigns it to the ShortQuantity field.
func (o *Position) SetShortQuantity(v float64) {
	o.ShortQuantity = &v
}

// GetAveragePrice returns the AveragePrice field value if set, zero value otherwise.
func (o *Position) GetAveragePrice() float64 {
	if o == nil || IsNil(o.AveragePrice) {
		var ret float64
		return ret
	}
	return *o.AveragePrice
}

// GetAveragePriceOk returns a tuple with the AveragePrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Position) GetAveragePriceOk() (*float64, bool) {
	if o == nil || IsNil(o.AveragePrice) {
		return nil, false
	}
	return o.AveragePrice, true
}

// HasAveragePrice returns a boolean if a field has been set.
func (o *Position) HasAveragePrice() bool {
	if o != nil && !IsNil(o.AveragePrice) {
		return true
	}

	return false
}

// SetAveragePrice gets a reference to the given float64 and assigns it to the AveragePrice field.
func (o *Position) SetAveragePrice(v float64) {
	o.AveragePrice = &v
}

// GetCurrentDayProfitLoss returns the CurrentDayProfitLoss field value if set, zero value otherwise.
func (o *Position) GetCurrentDayProfitLoss() float64 {
	if o == nil || IsNil(o.CurrentDayProfitLoss) {
		var ret float64
		return ret
	}
	return *o.CurrentDayProfitLoss
}

// GetCurrentDayProfitLossOk returns a tuple with the CurrentDayProfitLoss field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Position) GetCurrentDayProfitLossOk() (*float64, bool) {
	if o == nil || IsNil(o.CurrentDayProfitLoss) {
		return nil, false
	}
	return o.CurrentDayProfitLoss, true
}

// HasCurrentDayProfitLoss returns a boolean if a field has been set.
func (o *Position) HasCurrentDayProfitLoss() bool {
	if o != nil && !IsNil(o.CurrentDayProfitLoss) {
		return true
	}

	return false
}

// SetCurrentDayProfitLoss gets a reference to the given float64 and assigns it to the CurrentDayProfitLoss field.
func (o *Position) SetCurrentDayProfitLoss(v float64) {
	o.CurrentDayProfitLoss = &v
}

// GetCurrentDayProfitLossPercentage returns the CurrentDayProfitLossPercentage field value if set, zero value otherwise.
func (o *Position) GetCurrentDayProfitLossPercentage() float64 {
	if o == nil || IsNil(o.CurrentDayProfitLossPercentage) {
		var ret float64
		return ret
	}
	return *o.CurrentDayProfitLossPercentage
}

// GetCurrentDayProfitLossPercentageOk returns a tuple with the CurrentDayProfitLossPercentage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Position) GetCurrentDayProfitLossPercentageOk() (*float64, bool) {
	if o == nil || IsNil(o.CurrentDayProfitLossPercentage) {
		return nil, false
	}
	return o.CurrentDayProfitLossPercentage, true
}

// HasCurrentDayProfitLossPercentage returns a boolean if a field has been set.
func (o *Position) HasCurrentDayProfitLossPercentage() bool {
	if o != nil && !IsNil(o.CurrentDayProfitLossPercentage) {
		return true
	}

	return false
}

// SetCurrentDayProfitLossPercentage gets a reference to the given float64 and assigns it to the CurrentDayProfitLossPercentage field.
func (o *Position) SetCurrentDayProfitLossPercentage(v float64) {
	o.CurrentDayProfitLossPercentage = &v
}

// GetLongQuantity returns the LongQuantity field value if set, zero value otherwise.
func (o *Position) GetLongQuantity() float64 {
	if o == nil || IsNil(o.LongQuantity) {
		var ret float64
		return ret
	}
	return *o.LongQuantity
}

// GetLongQuantityOk returns a tuple with the LongQuantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Position) GetLongQuantityOk() (*float64, bool) {
	if o == nil || IsNil(o.LongQuantity) {
		return nil, false
	}
	return o.LongQuantity, true
}

// HasLongQuantity returns a boolean if a field has been set.
func (o *Position) HasLongQuantity() bool {
	if o != nil && !IsNil(o.LongQuantity) {
		return true
	}

	return false
}

// SetLongQuantity gets a reference to the given float64 and assigns it to the LongQuantity field.
func (o *Position) SetLongQuantity(v float64) {
	o.LongQuantity = &v
}

// GetSettledLongQuantity returns the SettledLongQuantity field value if set, zero value otherwise.
func (o *Position) GetSettledLongQuantity() float64 {
	if o == nil || IsNil(o.SettledLongQuantity) {
		var ret float64
		return ret
	}
	return *o.SettledLongQuantity
}

// GetSettledLongQuantityOk returns a tuple with the SettledLongQuantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Position) GetSettledLongQuantityOk() (*float64, bool) {
	if o == nil || IsNil(o.SettledLongQuantity) {
		return nil, false
	}
	return o.SettledLongQuantity, true
}

// HasSettledLongQuantity returns a boolean if a field has been set.
func (o *Position) HasSettledLongQuantity() bool {
	if o != nil && !IsNil(o.SettledLongQuantity) {
		return true
	}

	return false
}

// SetSettledLongQuantity gets a reference to the given float64 and assigns it to the SettledLongQuantity field.
func (o *Position) SetSettledLongQuantity(v float64) {
	o.SettledLongQuantity = &v
}

// GetSettledShortQuantity returns the SettledShortQuantity field value if set, zero value otherwise.
func (o *Position) GetSettledShortQuantity() float64 {
	if o == nil || IsNil(o.SettledShortQuantity) {
		var ret float64
		return ret
	}
	return *o.SettledShortQuantity
}

// GetSettledShortQuantityOk returns a tuple with the SettledShortQuantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Position) GetSettledShortQuantityOk() (*float64, bool) {
	if o == nil || IsNil(o.SettledShortQuantity) {
		return nil, false
	}
	return o.SettledShortQuantity, true
}

// HasSettledShortQuantity returns a boolean if a field has been set.
func (o *Position) HasSettledShortQuantity() bool {
	if o != nil && !IsNil(o.SettledShortQuantity) {
		return true
	}

	return false
}

// SetSettledShortQuantity gets a reference to the given float64 and assigns it to the SettledShortQuantity field.
func (o *Position) SetSettledShortQuantity(v float64) {
	o.SettledShortQuantity = &v
}

// GetAgedQuantity returns the AgedQuantity field value if set, zero value otherwise.
func (o *Position) GetAgedQuantity() float64 {
	if o == nil || IsNil(o.AgedQuantity) {
		var ret float64
		return ret
	}
	return *o.AgedQuantity
}

// GetAgedQuantityOk returns a tuple with the AgedQuantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Position) GetAgedQuantityOk() (*float64, bool) {
	if o == nil || IsNil(o.AgedQuantity) {
		return nil, false
	}
	return o.AgedQuantity, true
}

// HasAgedQuantity returns a boolean if a field has been set.
func (o *Position) HasAgedQuantity() bool {
	if o != nil && !IsNil(o.AgedQuantity) {
		return true
	}

	return false
}

// SetAgedQuantity gets a reference to the given float64 and assigns it to the AgedQuantity field.
func (o *Position) SetAgedQuantity(v float64) {
	o.AgedQuantity = &v
}

// GetInstrument returns the Instrument field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Position) GetInstrument() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Instrument
}

// GetInstrumentOk returns a tuple with the Instrument field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Position) GetInstrumentOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Instrument) {
		return nil, false
	}
	return &o.Instrument, true
}

// HasInstrument returns a boolean if a field has been set.
func (o *Position) HasInstrument() bool {
	if o != nil && !IsNil(o.Instrument) {
		return true
	}

	return false
}

// SetInstrument gets a reference to the given interface{} and assigns it to the Instrument field.
func (o *Position) SetInstrument(v interface{}) {
	o.Instrument = v
}

// GetMarketValue returns the MarketValue field value if set, zero value otherwise.
func (o *Position) GetMarketValue() float64 {
	if o == nil || IsNil(o.MarketValue) {
		var ret float64
		return ret
	}
	return *o.MarketValue
}

// GetMarketValueOk returns a tuple with the MarketValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Position) GetMarketValueOk() (*float64, bool) {
	if o == nil || IsNil(o.MarketValue) {
		return nil, false
	}
	return o.MarketValue, true
}

// HasMarketValue returns a boolean if a field has been set.
func (o *Position) HasMarketValue() bool {
	if o != nil && !IsNil(o.MarketValue) {
		return true
	}

	return false
}

// SetMarketValue gets a reference to the given float64 and assigns it to the MarketValue field.
func (o *Position) SetMarketValue(v float64) {
	o.MarketValue = &v
}

// GetMaintenanceRequirement returns the MaintenanceRequirement field value if set, zero value otherwise.
func (o *Position) GetMaintenanceRequirement() float64 {
	if o == nil || IsNil(o.MaintenanceRequirement) {
		var ret float64
		return ret
	}
	return *o.MaintenanceRequirement
}

// GetMaintenanceRequirementOk returns a tuple with the MaintenanceRequirement field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Position) GetMaintenanceRequirementOk() (*float64, bool) {
	if o == nil || IsNil(o.MaintenanceRequirement) {
		return nil, false
	}
	return o.MaintenanceRequirement, true
}

// HasMaintenanceRequirement returns a boolean if a field has been set.
func (o *Position) HasMaintenanceRequirement() bool {
	if o != nil && !IsNil(o.MaintenanceRequirement) {
		return true
	}

	return false
}

// SetMaintenanceRequirement gets a reference to the given float64 and assigns it to the MaintenanceRequirement field.
func (o *Position) SetMaintenanceRequirement(v float64) {
	o.MaintenanceRequirement = &v
}

// GetAverageLongPrice returns the AverageLongPrice field value if set, zero value otherwise.
func (o *Position) GetAverageLongPrice() float64 {
	if o == nil || IsNil(o.AverageLongPrice) {
		var ret float64
		return ret
	}
	return *o.AverageLongPrice
}

// GetAverageLongPriceOk returns a tuple with the AverageLongPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Position) GetAverageLongPriceOk() (*float64, bool) {
	if o == nil || IsNil(o.AverageLongPrice) {
		return nil, false
	}
	return o.AverageLongPrice, true
}

// HasAverageLongPrice returns a boolean if a field has been set.
func (o *Position) HasAverageLongPrice() bool {
	if o != nil && !IsNil(o.AverageLongPrice) {
		return true
	}

	return false
}

// SetAverageLongPrice gets a reference to the given float64 and assigns it to the AverageLongPrice field.
func (o *Position) SetAverageLongPrice(v float64) {
	o.AverageLongPrice = &v
}

// GetAverageShortPrice returns the AverageShortPrice field value if set, zero value otherwise.
func (o *Position) GetAverageShortPrice() float64 {
	if o == nil || IsNil(o.AverageShortPrice) {
		var ret float64
		return ret
	}
	return *o.AverageShortPrice
}

// GetAverageShortPriceOk returns a tuple with the AverageShortPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Position) GetAverageShortPriceOk() (*float64, bool) {
	if o == nil || IsNil(o.AverageShortPrice) {
		return nil, false
	}
	return o.AverageShortPrice, true
}

// HasAverageShortPrice returns a boolean if a field has been set.
func (o *Position) HasAverageShortPrice() bool {
	if o != nil && !IsNil(o.AverageShortPrice) {
		return true
	}

	return false
}

// SetAverageShortPrice gets a reference to the given float64 and assigns it to the AverageShortPrice field.
func (o *Position) SetAverageShortPrice(v float64) {
	o.AverageShortPrice = &v
}

// GetTaxLotAverageLongPrice returns the TaxLotAverageLongPrice field value if set, zero value otherwise.
func (o *Position) GetTaxLotAverageLongPrice() float64 {
	if o == nil || IsNil(o.TaxLotAverageLongPrice) {
		var ret float64
		return ret
	}
	return *o.TaxLotAverageLongPrice
}

// GetTaxLotAverageLongPriceOk returns a tuple with the TaxLotAverageLongPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Position) GetTaxLotAverageLongPriceOk() (*float64, bool) {
	if o == nil || IsNil(o.TaxLotAverageLongPrice) {
		return nil, false
	}
	return o.TaxLotAverageLongPrice, true
}

// HasTaxLotAverageLongPrice returns a boolean if a field has been set.
func (o *Position) HasTaxLotAverageLongPrice() bool {
	if o != nil && !IsNil(o.TaxLotAverageLongPrice) {
		return true
	}

	return false
}

// SetTaxLotAverageLongPrice gets a reference to the given float64 and assigns it to the TaxLotAverageLongPrice field.
func (o *Position) SetTaxLotAverageLongPrice(v float64) {
	o.TaxLotAverageLongPrice = &v
}

// GetTaxLotAverageShortPrice returns the TaxLotAverageShortPrice field value if set, zero value otherwise.
func (o *Position) GetTaxLotAverageShortPrice() float64 {
	if o == nil || IsNil(o.TaxLotAverageShortPrice) {
		var ret float64
		return ret
	}
	return *o.TaxLotAverageShortPrice
}

// GetTaxLotAverageShortPriceOk returns a tuple with the TaxLotAverageShortPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Position) GetTaxLotAverageShortPriceOk() (*float64, bool) {
	if o == nil || IsNil(o.TaxLotAverageShortPrice) {
		return nil, false
	}
	return o.TaxLotAverageShortPrice, true
}

// HasTaxLotAverageShortPrice returns a boolean if a field has been set.
func (o *Position) HasTaxLotAverageShortPrice() bool {
	if o != nil && !IsNil(o.TaxLotAverageShortPrice) {
		return true
	}

	return false
}

// SetTaxLotAverageShortPrice gets a reference to the given float64 and assigns it to the TaxLotAverageShortPrice field.
func (o *Position) SetTaxLotAverageShortPrice(v float64) {
	o.TaxLotAverageShortPrice = &v
}

// GetLongOpenProfitLoss returns the LongOpenProfitLoss field value if set, zero value otherwise.
func (o *Position) GetLongOpenProfitLoss() float64 {
	if o == nil || IsNil(o.LongOpenProfitLoss) {
		var ret float64
		return ret
	}
	return *o.LongOpenProfitLoss
}

// GetLongOpenProfitLossOk returns a tuple with the LongOpenProfitLoss field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Position) GetLongOpenProfitLossOk() (*float64, bool) {
	if o == nil || IsNil(o.LongOpenProfitLoss) {
		return nil, false
	}
	return o.LongOpenProfitLoss, true
}

// HasLongOpenProfitLoss returns a boolean if a field has been set.
func (o *Position) HasLongOpenProfitLoss() bool {
	if o != nil && !IsNil(o.LongOpenProfitLoss) {
		return true
	}

	return false
}

// SetLongOpenProfitLoss gets a reference to the given float64 and assigns it to the LongOpenProfitLoss field.
func (o *Position) SetLongOpenProfitLoss(v float64) {
	o.LongOpenProfitLoss = &v
}

// GetShortOpenProfitLoss returns the ShortOpenProfitLoss field value if set, zero value otherwise.
func (o *Position) GetShortOpenProfitLoss() float64 {
	if o == nil || IsNil(o.ShortOpenProfitLoss) {
		var ret float64
		return ret
	}
	return *o.ShortOpenProfitLoss
}

// GetShortOpenProfitLossOk returns a tuple with the ShortOpenProfitLoss field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Position) GetShortOpenProfitLossOk() (*float64, bool) {
	if o == nil || IsNil(o.ShortOpenProfitLoss) {
		return nil, false
	}
	return o.ShortOpenProfitLoss, true
}

// HasShortOpenProfitLoss returns a boolean if a field has been set.
func (o *Position) HasShortOpenProfitLoss() bool {
	if o != nil && !IsNil(o.ShortOpenProfitLoss) {
		return true
	}

	return false
}

// SetShortOpenProfitLoss gets a reference to the given float64 and assigns it to the ShortOpenProfitLoss field.
func (o *Position) SetShortOpenProfitLoss(v float64) {
	o.ShortOpenProfitLoss = &v
}

// GetPreviousSessionLongQuantity returns the PreviousSessionLongQuantity field value if set, zero value otherwise.
func (o *Position) GetPreviousSessionLongQuantity() float64 {
	if o == nil || IsNil(o.PreviousSessionLongQuantity) {
		var ret float64
		return ret
	}
	return *o.PreviousSessionLongQuantity
}

// GetPreviousSessionLongQuantityOk returns a tuple with the PreviousSessionLongQuantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Position) GetPreviousSessionLongQuantityOk() (*float64, bool) {
	if o == nil || IsNil(o.PreviousSessionLongQuantity) {
		return nil, false
	}
	return o.PreviousSessionLongQuantity, true
}

// HasPreviousSessionLongQuantity returns a boolean if a field has been set.
func (o *Position) HasPreviousSessionLongQuantity() bool {
	if o != nil && !IsNil(o.PreviousSessionLongQuantity) {
		return true
	}

	return false
}

// SetPreviousSessionLongQuantity gets a reference to the given float64 and assigns it to the PreviousSessionLongQuantity field.
func (o *Position) SetPreviousSessionLongQuantity(v float64) {
	o.PreviousSessionLongQuantity = &v
}

// GetPreviousSessionShortQuantity returns the PreviousSessionShortQuantity field value if set, zero value otherwise.
func (o *Position) GetPreviousSessionShortQuantity() float64 {
	if o == nil || IsNil(o.PreviousSessionShortQuantity) {
		var ret float64
		return ret
	}
	return *o.PreviousSessionShortQuantity
}

// GetPreviousSessionShortQuantityOk returns a tuple with the PreviousSessionShortQuantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Position) GetPreviousSessionShortQuantityOk() (*float64, bool) {
	if o == nil || IsNil(o.PreviousSessionShortQuantity) {
		return nil, false
	}
	return o.PreviousSessionShortQuantity, true
}

// HasPreviousSessionShortQuantity returns a boolean if a field has been set.
func (o *Position) HasPreviousSessionShortQuantity() bool {
	if o != nil && !IsNil(o.PreviousSessionShortQuantity) {
		return true
	}

	return false
}

// SetPreviousSessionShortQuantity gets a reference to the given float64 and assigns it to the PreviousSessionShortQuantity field.
func (o *Position) SetPreviousSessionShortQuantity(v float64) {
	o.PreviousSessionShortQuantity = &v
}

// GetCurrentDayCost returns the CurrentDayCost field value if set, zero value otherwise.
func (o *Position) GetCurrentDayCost() float64 {
	if o == nil || IsNil(o.CurrentDayCost) {
		var ret float64
		return ret
	}
	return *o.CurrentDayCost
}

// GetCurrentDayCostOk returns a tuple with the CurrentDayCost field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Position) GetCurrentDayCostOk() (*float64, bool) {
	if o == nil || IsNil(o.CurrentDayCost) {
		return nil, false
	}
	return o.CurrentDayCost, true
}

// HasCurrentDayCost returns a boolean if a field has been set.
func (o *Position) HasCurrentDayCost() bool {
	if o != nil && !IsNil(o.CurrentDayCost) {
		return true
	}

	return false
}

// SetCurrentDayCost gets a reference to the given float64 and assigns it to the CurrentDayCost field.
func (o *Position) SetCurrentDayCost(v float64) {
	o.CurrentDayCost = &v
}

func (o Position) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Position) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ShortQuantity) {
		toSerialize["shortQuantity"] = o.ShortQuantity
	}
	if !IsNil(o.AveragePrice) {
		toSerialize["averagePrice"] = o.AveragePrice
	}
	if !IsNil(o.CurrentDayProfitLoss) {
		toSerialize["currentDayProfitLoss"] = o.CurrentDayProfitLoss
	}
	if !IsNil(o.CurrentDayProfitLossPercentage) {
		toSerialize["currentDayProfitLossPercentage"] = o.CurrentDayProfitLossPercentage
	}
	if !IsNil(o.LongQuantity) {
		toSerialize["longQuantity"] = o.LongQuantity
	}
	if !IsNil(o.SettledLongQuantity) {
		toSerialize["settledLongQuantity"] = o.SettledLongQuantity
	}
	if !IsNil(o.SettledShortQuantity) {
		toSerialize["settledShortQuantity"] = o.SettledShortQuantity
	}
	if !IsNil(o.AgedQuantity) {
		toSerialize["agedQuantity"] = o.AgedQuantity
	}
	if o.Instrument != nil {
		toSerialize["instrument"] = o.Instrument
	}
	if !IsNil(o.MarketValue) {
		toSerialize["marketValue"] = o.MarketValue
	}
	if !IsNil(o.MaintenanceRequirement) {
		toSerialize["maintenanceRequirement"] = o.MaintenanceRequirement
	}
	if !IsNil(o.AverageLongPrice) {
		toSerialize["averageLongPrice"] = o.AverageLongPrice
	}
	if !IsNil(o.AverageShortPrice) {
		toSerialize["averageShortPrice"] = o.AverageShortPrice
	}
	if !IsNil(o.TaxLotAverageLongPrice) {
		toSerialize["taxLotAverageLongPrice"] = o.TaxLotAverageLongPrice
	}
	if !IsNil(o.TaxLotAverageShortPrice) {
		toSerialize["taxLotAverageShortPrice"] = o.TaxLotAverageShortPrice
	}
	if !IsNil(o.LongOpenProfitLoss) {
		toSerialize["longOpenProfitLoss"] = o.LongOpenProfitLoss
	}
	if !IsNil(o.ShortOpenProfitLoss) {
		toSerialize["shortOpenProfitLoss"] = o.ShortOpenProfitLoss
	}
	if !IsNil(o.PreviousSessionLongQuantity) {
		toSerialize["previousSessionLongQuantity"] = o.PreviousSessionLongQuantity
	}
	if !IsNil(o.PreviousSessionShortQuantity) {
		toSerialize["previousSessionShortQuantity"] = o.PreviousSessionShortQuantity
	}
	if !IsNil(o.CurrentDayCost) {
		toSerialize["currentDayCost"] = o.CurrentDayCost
	}
	return toSerialize, nil
}

type NullablePosition struct {
	value *Position
	isSet bool
}

func (v NullablePosition) Get() *Position {
	return v.value
}

func (v *NullablePosition) Set(val *Position) {
	v.value = val
	v.isSet = true
}

func (v NullablePosition) IsSet() bool {
	return v.isSet
}

func (v *NullablePosition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePosition(val *Position) *NullablePosition {
	return &NullablePosition{value: val, isSet: true}
}

func (v NullablePosition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePosition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


