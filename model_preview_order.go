/*
Trader API - Account Access and User Preferences

Schwab Trader API access to Account, Order entry and User Preferences

API version: 1.0.0
Contact: TraderAPI@Schwab.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the PreviewOrder type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PreviewOrder{}

// PreviewOrder struct for PreviewOrder
type PreviewOrder struct {
	OrderId *int64 `json:"orderId,omitempty"`
	OrderStrategy *OrderStrategy `json:"orderStrategy,omitempty"`
	OrderValidationResult *OrderValidationResult `json:"orderValidationResult,omitempty"`
	CommissionAndFee *CommissionAndFee `json:"commissionAndFee,omitempty"`
}

// NewPreviewOrder instantiates a new PreviewOrder object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPreviewOrder() *PreviewOrder {
	this := PreviewOrder{}
	return &this
}

// NewPreviewOrderWithDefaults instantiates a new PreviewOrder object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPreviewOrderWithDefaults() *PreviewOrder {
	this := PreviewOrder{}
	return &this
}

// GetOrderId returns the OrderId field value if set, zero value otherwise.
func (o *PreviewOrder) GetOrderId() int64 {
	if o == nil || IsNil(o.OrderId) {
		var ret int64
		return ret
	}
	return *o.OrderId
}

// GetOrderIdOk returns a tuple with the OrderId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PreviewOrder) GetOrderIdOk() (*int64, bool) {
	if o == nil || IsNil(o.OrderId) {
		return nil, false
	}
	return o.OrderId, true
}

// HasOrderId returns a boolean if a field has been set.
func (o *PreviewOrder) HasOrderId() bool {
	if o != nil && !IsNil(o.OrderId) {
		return true
	}

	return false
}

// SetOrderId gets a reference to the given int64 and assigns it to the OrderId field.
func (o *PreviewOrder) SetOrderId(v int64) {
	o.OrderId = &v
}

// GetOrderStrategy returns the OrderStrategy field value if set, zero value otherwise.
func (o *PreviewOrder) GetOrderStrategy() OrderStrategy {
	if o == nil || IsNil(o.OrderStrategy) {
		var ret OrderStrategy
		return ret
	}
	return *o.OrderStrategy
}

// GetOrderStrategyOk returns a tuple with the OrderStrategy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PreviewOrder) GetOrderStrategyOk() (*OrderStrategy, bool) {
	if o == nil || IsNil(o.OrderStrategy) {
		return nil, false
	}
	return o.OrderStrategy, true
}

// HasOrderStrategy returns a boolean if a field has been set.
func (o *PreviewOrder) HasOrderStrategy() bool {
	if o != nil && !IsNil(o.OrderStrategy) {
		return true
	}

	return false
}

// SetOrderStrategy gets a reference to the given OrderStrategy and assigns it to the OrderStrategy field.
func (o *PreviewOrder) SetOrderStrategy(v OrderStrategy) {
	o.OrderStrategy = &v
}

// GetOrderValidationResult returns the OrderValidationResult field value if set, zero value otherwise.
func (o *PreviewOrder) GetOrderValidationResult() OrderValidationResult {
	if o == nil || IsNil(o.OrderValidationResult) {
		var ret OrderValidationResult
		return ret
	}
	return *o.OrderValidationResult
}

// GetOrderValidationResultOk returns a tuple with the OrderValidationResult field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PreviewOrder) GetOrderValidationResultOk() (*OrderValidationResult, bool) {
	if o == nil || IsNil(o.OrderValidationResult) {
		return nil, false
	}
	return o.OrderValidationResult, true
}

// HasOrderValidationResult returns a boolean if a field has been set.
func (o *PreviewOrder) HasOrderValidationResult() bool {
	if o != nil && !IsNil(o.OrderValidationResult) {
		return true
	}

	return false
}

// SetOrderValidationResult gets a reference to the given OrderValidationResult and assigns it to the OrderValidationResult field.
func (o *PreviewOrder) SetOrderValidationResult(v OrderValidationResult) {
	o.OrderValidationResult = &v
}

// GetCommissionAndFee returns the CommissionAndFee field value if set, zero value otherwise.
func (o *PreviewOrder) GetCommissionAndFee() CommissionAndFee {
	if o == nil || IsNil(o.CommissionAndFee) {
		var ret CommissionAndFee
		return ret
	}
	return *o.CommissionAndFee
}

// GetCommissionAndFeeOk returns a tuple with the CommissionAndFee field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PreviewOrder) GetCommissionAndFeeOk() (*CommissionAndFee, bool) {
	if o == nil || IsNil(o.CommissionAndFee) {
		return nil, false
	}
	return o.CommissionAndFee, true
}

// HasCommissionAndFee returns a boolean if a field has been set.
func (o *PreviewOrder) HasCommissionAndFee() bool {
	if o != nil && !IsNil(o.CommissionAndFee) {
		return true
	}

	return false
}

// SetCommissionAndFee gets a reference to the given CommissionAndFee and assigns it to the CommissionAndFee field.
func (o *PreviewOrder) SetCommissionAndFee(v CommissionAndFee) {
	o.CommissionAndFee = &v
}

func (o PreviewOrder) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PreviewOrder) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.OrderId) {
		toSerialize["orderId"] = o.OrderId
	}
	if !IsNil(o.OrderStrategy) {
		toSerialize["orderStrategy"] = o.OrderStrategy
	}
	if !IsNil(o.OrderValidationResult) {
		toSerialize["orderValidationResult"] = o.OrderValidationResult
	}
	if !IsNil(o.CommissionAndFee) {
		toSerialize["commissionAndFee"] = o.CommissionAndFee
	}
	return toSerialize, nil
}

type NullablePreviewOrder struct {
	value *PreviewOrder
	isSet bool
}

func (v NullablePreviewOrder) Get() *PreviewOrder {
	return v.value
}

func (v *NullablePreviewOrder) Set(val *PreviewOrder) {
	v.value = val
	v.isSet = true
}

func (v NullablePreviewOrder) IsSet() bool {
	return v.isSet
}

func (v *NullablePreviewOrder) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePreviewOrder(val *PreviewOrder) *NullablePreviewOrder {
	return &NullablePreviewOrder{value: val, isSet: true}
}

func (v NullablePreviewOrder) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePreviewOrder) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


