/*
Trader API - Account Access and User Preferences

Schwab Trader API access to Account, Order entry and User Preferences

API version: 1.0.0
Contact: TraderAPI@Schwab.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the Fees type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Fees{}

// Fees struct for Fees
type Fees struct {
	FeeLegs []FeeLeg `json:"feeLegs,omitempty"`
}

// NewFees instantiates a new Fees object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFees() *Fees {
	this := Fees{}
	return &this
}

// NewFeesWithDefaults instantiates a new Fees object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFeesWithDefaults() *Fees {
	this := Fees{}
	return &this
}

// GetFeeLegs returns the FeeLegs field value if set, zero value otherwise.
func (o *Fees) GetFeeLegs() []FeeLeg {
	if o == nil || IsNil(o.FeeLegs) {
		var ret []FeeLeg
		return ret
	}
	return o.FeeLegs
}

// GetFeeLegsOk returns a tuple with the FeeLegs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Fees) GetFeeLegsOk() ([]FeeLeg, bool) {
	if o == nil || IsNil(o.FeeLegs) {
		return nil, false
	}
	return o.FeeLegs, true
}

// HasFeeLegs returns a boolean if a field has been set.
func (o *Fees) HasFeeLegs() bool {
	if o != nil && !IsNil(o.FeeLegs) {
		return true
	}

	return false
}

// SetFeeLegs gets a reference to the given []FeeLeg and assigns it to the FeeLegs field.
func (o *Fees) SetFeeLegs(v []FeeLeg) {
	o.FeeLegs = v
}

func (o Fees) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Fees) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.FeeLegs) {
		toSerialize["feeLegs"] = o.FeeLegs
	}
	return toSerialize, nil
}

type NullableFees struct {
	value *Fees
	isSet bool
}

func (v NullableFees) Get() *Fees {
	return v.value
}

func (v *NullableFees) Set(val *Fees) {
	v.value = val
	v.isSet = true
}

func (v NullableFees) IsSet() bool {
	return v.isSet
}

func (v *NullableFees) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFees(val *Fees) *NullableFees {
	return &NullableFees{value: val, isSet: true}
}

func (v NullableFees) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFees) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


