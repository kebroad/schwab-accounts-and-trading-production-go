/*
Trader API - Account Access and User Preferences

Schwab Trader API access to Account, Order entry and User Preferences

API version: 1.0.0
Contact: TraderAPI@Schwab.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
)

// TransactionType the model 'TransactionType'
type TransactionType string

// List of TransactionType
const (
	TRANSACTIONTYPE_TRADE TransactionType = "TRADE"
	TRANSACTIONTYPE_RECEIVE_AND_DELIVER TransactionType = "RECEIVE_AND_DELIVER"
	TRANSACTIONTYPE_DIVIDEND_OR_INTEREST TransactionType = "DIVIDEND_OR_INTEREST"
	TRANSACTIONTYPE_ACH_RECEIPT TransactionType = "ACH_RECEIPT"
	TRANSACTIONTYPE_ACH_DISBURSEMENT TransactionType = "ACH_DISBURSEMENT"
	TRANSACTIONTYPE_CASH_RECEIPT TransactionType = "CASH_RECEIPT"
	TRANSACTIONTYPE_CASH_DISBURSEMENT TransactionType = "CASH_DISBURSEMENT"
	TRANSACTIONTYPE_ELECTRONIC_FUND TransactionType = "ELECTRONIC_FUND"
	TRANSACTIONTYPE_WIRE_OUT TransactionType = "WIRE_OUT"
	TRANSACTIONTYPE_WIRE_IN TransactionType = "WIRE_IN"
	TRANSACTIONTYPE_JOURNAL TransactionType = "JOURNAL"
	TRANSACTIONTYPE_MEMORANDUM TransactionType = "MEMORANDUM"
	TRANSACTIONTYPE_MARGIN_CALL TransactionType = "MARGIN_CALL"
	TRANSACTIONTYPE_MONEY_MARKET TransactionType = "MONEY_MARKET"
	TRANSACTIONTYPE_SMA_ADJUSTMENT TransactionType = "SMA_ADJUSTMENT"
)

// All allowed values of TransactionType enum
var AllowedTransactionTypeEnumValues = []TransactionType{
	"TRADE",
	"RECEIVE_AND_DELIVER",
	"DIVIDEND_OR_INTEREST",
	"ACH_RECEIPT",
	"ACH_DISBURSEMENT",
	"CASH_RECEIPT",
	"CASH_DISBURSEMENT",
	"ELECTRONIC_FUND",
	"WIRE_OUT",
	"WIRE_IN",
	"JOURNAL",
	"MEMORANDUM",
	"MARGIN_CALL",
	"MONEY_MARKET",
	"SMA_ADJUSTMENT",
}

func (v *TransactionType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TransactionType(value)
	for _, existing := range AllowedTransactionTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TransactionType", value)
}

// NewTransactionTypeFromValue returns a pointer to a valid TransactionType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTransactionTypeFromValue(v string) (*TransactionType, error) {
	ev := TransactionType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TransactionType: valid values are %v", v, AllowedTransactionTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TransactionType) IsValid() bool {
	for _, existing := range AllowedTransactionTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TransactionType value
func (v TransactionType) Ptr() *TransactionType {
	return &v
}

type NullableTransactionType struct {
	value *TransactionType
	isSet bool
}

func (v NullableTransactionType) Get() *TransactionType {
	return v.value
}

func (v *NullableTransactionType) Set(val *TransactionType) {
	v.value = val
	v.isSet = true
}

func (v NullableTransactionType) IsSet() bool {
	return v.isSet
}

func (v *NullableTransactionType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransactionType(val *TransactionType) *NullableTransactionType {
	return &NullableTransactionType{value: val, isSet: true}
}

func (v NullableTransactionType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransactionType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

