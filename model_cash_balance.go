/*
Trader API - Account Access and User Preferences

Schwab Trader API access to Account, Order entry and User Preferences

API version: 1.0.0
Contact: TraderAPI@Schwab.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the CashBalance type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CashBalance{}

// CashBalance struct for CashBalance
type CashBalance struct {
	CashAvailableForTrading *float64 `json:"cashAvailableForTrading,omitempty"`
	CashAvailableForWithdrawal *float64 `json:"cashAvailableForWithdrawal,omitempty"`
	CashCall *float64 `json:"cashCall,omitempty"`
	LongNonMarginableMarketValue *float64 `json:"longNonMarginableMarketValue,omitempty"`
	TotalCash *float64 `json:"totalCash,omitempty"`
	CashDebitCallValue *float64 `json:"cashDebitCallValue,omitempty"`
	UnsettledCash *float64 `json:"unsettledCash,omitempty"`
}

// NewCashBalance instantiates a new CashBalance object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCashBalance() *CashBalance {
	this := CashBalance{}
	return &this
}

// NewCashBalanceWithDefaults instantiates a new CashBalance object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCashBalanceWithDefaults() *CashBalance {
	this := CashBalance{}
	return &this
}

// GetCashAvailableForTrading returns the CashAvailableForTrading field value if set, zero value otherwise.
func (o *CashBalance) GetCashAvailableForTrading() float64 {
	if o == nil || IsNil(o.CashAvailableForTrading) {
		var ret float64
		return ret
	}
	return *o.CashAvailableForTrading
}

// GetCashAvailableForTradingOk returns a tuple with the CashAvailableForTrading field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CashBalance) GetCashAvailableForTradingOk() (*float64, bool) {
	if o == nil || IsNil(o.CashAvailableForTrading) {
		return nil, false
	}
	return o.CashAvailableForTrading, true
}

// HasCashAvailableForTrading returns a boolean if a field has been set.
func (o *CashBalance) HasCashAvailableForTrading() bool {
	if o != nil && !IsNil(o.CashAvailableForTrading) {
		return true
	}

	return false
}

// SetCashAvailableForTrading gets a reference to the given float64 and assigns it to the CashAvailableForTrading field.
func (o *CashBalance) SetCashAvailableForTrading(v float64) {
	o.CashAvailableForTrading = &v
}

// GetCashAvailableForWithdrawal returns the CashAvailableForWithdrawal field value if set, zero value otherwise.
func (o *CashBalance) GetCashAvailableForWithdrawal() float64 {
	if o == nil || IsNil(o.CashAvailableForWithdrawal) {
		var ret float64
		return ret
	}
	return *o.CashAvailableForWithdrawal
}

// GetCashAvailableForWithdrawalOk returns a tuple with the CashAvailableForWithdrawal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CashBalance) GetCashAvailableForWithdrawalOk() (*float64, bool) {
	if o == nil || IsNil(o.CashAvailableForWithdrawal) {
		return nil, false
	}
	return o.CashAvailableForWithdrawal, true
}

// HasCashAvailableForWithdrawal returns a boolean if a field has been set.
func (o *CashBalance) HasCashAvailableForWithdrawal() bool {
	if o != nil && !IsNil(o.CashAvailableForWithdrawal) {
		return true
	}

	return false
}

// SetCashAvailableForWithdrawal gets a reference to the given float64 and assigns it to the CashAvailableForWithdrawal field.
func (o *CashBalance) SetCashAvailableForWithdrawal(v float64) {
	o.CashAvailableForWithdrawal = &v
}

// GetCashCall returns the CashCall field value if set, zero value otherwise.
func (o *CashBalance) GetCashCall() float64 {
	if o == nil || IsNil(o.CashCall) {
		var ret float64
		return ret
	}
	return *o.CashCall
}

// GetCashCallOk returns a tuple with the CashCall field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CashBalance) GetCashCallOk() (*float64, bool) {
	if o == nil || IsNil(o.CashCall) {
		return nil, false
	}
	return o.CashCall, true
}

// HasCashCall returns a boolean if a field has been set.
func (o *CashBalance) HasCashCall() bool {
	if o != nil && !IsNil(o.CashCall) {
		return true
	}

	return false
}

// SetCashCall gets a reference to the given float64 and assigns it to the CashCall field.
func (o *CashBalance) SetCashCall(v float64) {
	o.CashCall = &v
}

// GetLongNonMarginableMarketValue returns the LongNonMarginableMarketValue field value if set, zero value otherwise.
func (o *CashBalance) GetLongNonMarginableMarketValue() float64 {
	if o == nil || IsNil(o.LongNonMarginableMarketValue) {
		var ret float64
		return ret
	}
	return *o.LongNonMarginableMarketValue
}

// GetLongNonMarginableMarketValueOk returns a tuple with the LongNonMarginableMarketValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CashBalance) GetLongNonMarginableMarketValueOk() (*float64, bool) {
	if o == nil || IsNil(o.LongNonMarginableMarketValue) {
		return nil, false
	}
	return o.LongNonMarginableMarketValue, true
}

// HasLongNonMarginableMarketValue returns a boolean if a field has been set.
func (o *CashBalance) HasLongNonMarginableMarketValue() bool {
	if o != nil && !IsNil(o.LongNonMarginableMarketValue) {
		return true
	}

	return false
}

// SetLongNonMarginableMarketValue gets a reference to the given float64 and assigns it to the LongNonMarginableMarketValue field.
func (o *CashBalance) SetLongNonMarginableMarketValue(v float64) {
	o.LongNonMarginableMarketValue = &v
}

// GetTotalCash returns the TotalCash field value if set, zero value otherwise.
func (o *CashBalance) GetTotalCash() float64 {
	if o == nil || IsNil(o.TotalCash) {
		var ret float64
		return ret
	}
	return *o.TotalCash
}

// GetTotalCashOk returns a tuple with the TotalCash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CashBalance) GetTotalCashOk() (*float64, bool) {
	if o == nil || IsNil(o.TotalCash) {
		return nil, false
	}
	return o.TotalCash, true
}

// HasTotalCash returns a boolean if a field has been set.
func (o *CashBalance) HasTotalCash() bool {
	if o != nil && !IsNil(o.TotalCash) {
		return true
	}

	return false
}

// SetTotalCash gets a reference to the given float64 and assigns it to the TotalCash field.
func (o *CashBalance) SetTotalCash(v float64) {
	o.TotalCash = &v
}

// GetCashDebitCallValue returns the CashDebitCallValue field value if set, zero value otherwise.
func (o *CashBalance) GetCashDebitCallValue() float64 {
	if o == nil || IsNil(o.CashDebitCallValue) {
		var ret float64
		return ret
	}
	return *o.CashDebitCallValue
}

// GetCashDebitCallValueOk returns a tuple with the CashDebitCallValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CashBalance) GetCashDebitCallValueOk() (*float64, bool) {
	if o == nil || IsNil(o.CashDebitCallValue) {
		return nil, false
	}
	return o.CashDebitCallValue, true
}

// HasCashDebitCallValue returns a boolean if a field has been set.
func (o *CashBalance) HasCashDebitCallValue() bool {
	if o != nil && !IsNil(o.CashDebitCallValue) {
		return true
	}

	return false
}

// SetCashDebitCallValue gets a reference to the given float64 and assigns it to the CashDebitCallValue field.
func (o *CashBalance) SetCashDebitCallValue(v float64) {
	o.CashDebitCallValue = &v
}

// GetUnsettledCash returns the UnsettledCash field value if set, zero value otherwise.
func (o *CashBalance) GetUnsettledCash() float64 {
	if o == nil || IsNil(o.UnsettledCash) {
		var ret float64
		return ret
	}
	return *o.UnsettledCash
}

// GetUnsettledCashOk returns a tuple with the UnsettledCash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CashBalance) GetUnsettledCashOk() (*float64, bool) {
	if o == nil || IsNil(o.UnsettledCash) {
		return nil, false
	}
	return o.UnsettledCash, true
}

// HasUnsettledCash returns a boolean if a field has been set.
func (o *CashBalance) HasUnsettledCash() bool {
	if o != nil && !IsNil(o.UnsettledCash) {
		return true
	}

	return false
}

// SetUnsettledCash gets a reference to the given float64 and assigns it to the UnsettledCash field.
func (o *CashBalance) SetUnsettledCash(v float64) {
	o.UnsettledCash = &v
}

func (o CashBalance) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CashBalance) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CashAvailableForTrading) {
		toSerialize["cashAvailableForTrading"] = o.CashAvailableForTrading
	}
	if !IsNil(o.CashAvailableForWithdrawal) {
		toSerialize["cashAvailableForWithdrawal"] = o.CashAvailableForWithdrawal
	}
	if !IsNil(o.CashCall) {
		toSerialize["cashCall"] = o.CashCall
	}
	if !IsNil(o.LongNonMarginableMarketValue) {
		toSerialize["longNonMarginableMarketValue"] = o.LongNonMarginableMarketValue
	}
	if !IsNil(o.TotalCash) {
		toSerialize["totalCash"] = o.TotalCash
	}
	if !IsNil(o.CashDebitCallValue) {
		toSerialize["cashDebitCallValue"] = o.CashDebitCallValue
	}
	if !IsNil(o.UnsettledCash) {
		toSerialize["unsettledCash"] = o.UnsettledCash
	}
	return toSerialize, nil
}

type NullableCashBalance struct {
	value *CashBalance
	isSet bool
}

func (v NullableCashBalance) Get() *CashBalance {
	return v.value
}

func (v *NullableCashBalance) Set(val *CashBalance) {
	v.value = val
	v.isSet = true
}

func (v NullableCashBalance) IsSet() bool {
	return v.isSet
}

func (v *NullableCashBalance) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCashBalance(val *CashBalance) *NullableCashBalance {
	return &NullableCashBalance{value: val, isSet: true}
}

func (v NullableCashBalance) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCashBalance) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


