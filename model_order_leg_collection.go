/*
Trader API - Account Access and User Preferences

Schwab Trader API access to Account, Order entry and User Preferences

API version: 1.0.0
Contact: TraderAPI@Schwab.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the OrderLegCollection type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OrderLegCollection{}

// OrderLegCollection struct for OrderLegCollection
type OrderLegCollection struct {
	OrderLegType *string `json:"orderLegType,omitempty"`
	LegId *int64 `json:"legId,omitempty"`
	Instrument interface{} `json:"instrument,omitempty"`
	Instruction *Instruction `json:"instruction,omitempty"`
	PositionEffect *string `json:"positionEffect,omitempty"`
	Quantity *float64 `json:"quantity,omitempty"`
	QuantityType *string `json:"quantityType,omitempty"`
	DivCapGains *string `json:"divCapGains,omitempty"`
	ToSymbol *string `json:"toSymbol,omitempty"`
}

// NewOrderLegCollection instantiates a new OrderLegCollection object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOrderLegCollection() *OrderLegCollection {
	this := OrderLegCollection{}
	return &this
}

// NewOrderLegCollectionWithDefaults instantiates a new OrderLegCollection object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOrderLegCollectionWithDefaults() *OrderLegCollection {
	this := OrderLegCollection{}
	return &this
}

// GetOrderLegType returns the OrderLegType field value if set, zero value otherwise.
func (o *OrderLegCollection) GetOrderLegType() string {
	if o == nil || IsNil(o.OrderLegType) {
		var ret string
		return ret
	}
	return *o.OrderLegType
}

// GetOrderLegTypeOk returns a tuple with the OrderLegType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderLegCollection) GetOrderLegTypeOk() (*string, bool) {
	if o == nil || IsNil(o.OrderLegType) {
		return nil, false
	}
	return o.OrderLegType, true
}

// HasOrderLegType returns a boolean if a field has been set.
func (o *OrderLegCollection) HasOrderLegType() bool {
	if o != nil && !IsNil(o.OrderLegType) {
		return true
	}

	return false
}

// SetOrderLegType gets a reference to the given string and assigns it to the OrderLegType field.
func (o *OrderLegCollection) SetOrderLegType(v string) {
	o.OrderLegType = &v
}

// GetLegId returns the LegId field value if set, zero value otherwise.
func (o *OrderLegCollection) GetLegId() int64 {
	if o == nil || IsNil(o.LegId) {
		var ret int64
		return ret
	}
	return *o.LegId
}

// GetLegIdOk returns a tuple with the LegId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderLegCollection) GetLegIdOk() (*int64, bool) {
	if o == nil || IsNil(o.LegId) {
		return nil, false
	}
	return o.LegId, true
}

// HasLegId returns a boolean if a field has been set.
func (o *OrderLegCollection) HasLegId() bool {
	if o != nil && !IsNil(o.LegId) {
		return true
	}

	return false
}

// SetLegId gets a reference to the given int64 and assigns it to the LegId field.
func (o *OrderLegCollection) SetLegId(v int64) {
	o.LegId = &v
}

// GetInstrument returns the Instrument field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OrderLegCollection) GetInstrument() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Instrument
}

// GetInstrumentOk returns a tuple with the Instrument field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OrderLegCollection) GetInstrumentOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Instrument) {
		return nil, false
	}
	return &o.Instrument, true
}

// HasInstrument returns a boolean if a field has been set.
func (o *OrderLegCollection) HasInstrument() bool {
	if o != nil && !IsNil(o.Instrument) {
		return true
	}

	return false
}

// SetInstrument gets a reference to the given interface{} and assigns it to the Instrument field.
func (o *OrderLegCollection) SetInstrument(v interface{}) {
	o.Instrument = v
}

// GetInstruction returns the Instruction field value if set, zero value otherwise.
func (o *OrderLegCollection) GetInstruction() Instruction {
	if o == nil || IsNil(o.Instruction) {
		var ret Instruction
		return ret
	}
	return *o.Instruction
}

// GetInstructionOk returns a tuple with the Instruction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderLegCollection) GetInstructionOk() (*Instruction, bool) {
	if o == nil || IsNil(o.Instruction) {
		return nil, false
	}
	return o.Instruction, true
}

// HasInstruction returns a boolean if a field has been set.
func (o *OrderLegCollection) HasInstruction() bool {
	if o != nil && !IsNil(o.Instruction) {
		return true
	}

	return false
}

// SetInstruction gets a reference to the given Instruction and assigns it to the Instruction field.
func (o *OrderLegCollection) SetInstruction(v Instruction) {
	o.Instruction = &v
}

// GetPositionEffect returns the PositionEffect field value if set, zero value otherwise.
func (o *OrderLegCollection) GetPositionEffect() string {
	if o == nil || IsNil(o.PositionEffect) {
		var ret string
		return ret
	}
	return *o.PositionEffect
}

// GetPositionEffectOk returns a tuple with the PositionEffect field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderLegCollection) GetPositionEffectOk() (*string, bool) {
	if o == nil || IsNil(o.PositionEffect) {
		return nil, false
	}
	return o.PositionEffect, true
}

// HasPositionEffect returns a boolean if a field has been set.
func (o *OrderLegCollection) HasPositionEffect() bool {
	if o != nil && !IsNil(o.PositionEffect) {
		return true
	}

	return false
}

// SetPositionEffect gets a reference to the given string and assigns it to the PositionEffect field.
func (o *OrderLegCollection) SetPositionEffect(v string) {
	o.PositionEffect = &v
}

// GetQuantity returns the Quantity field value if set, zero value otherwise.
func (o *OrderLegCollection) GetQuantity() float64 {
	if o == nil || IsNil(o.Quantity) {
		var ret float64
		return ret
	}
	return *o.Quantity
}

// GetQuantityOk returns a tuple with the Quantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderLegCollection) GetQuantityOk() (*float64, bool) {
	if o == nil || IsNil(o.Quantity) {
		return nil, false
	}
	return o.Quantity, true
}

// HasQuantity returns a boolean if a field has been set.
func (o *OrderLegCollection) HasQuantity() bool {
	if o != nil && !IsNil(o.Quantity) {
		return true
	}

	return false
}

// SetQuantity gets a reference to the given float64 and assigns it to the Quantity field.
func (o *OrderLegCollection) SetQuantity(v float64) {
	o.Quantity = &v
}

// GetQuantityType returns the QuantityType field value if set, zero value otherwise.
func (o *OrderLegCollection) GetQuantityType() string {
	if o == nil || IsNil(o.QuantityType) {
		var ret string
		return ret
	}
	return *o.QuantityType
}

// GetQuantityTypeOk returns a tuple with the QuantityType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderLegCollection) GetQuantityTypeOk() (*string, bool) {
	if o == nil || IsNil(o.QuantityType) {
		return nil, false
	}
	return o.QuantityType, true
}

// HasQuantityType returns a boolean if a field has been set.
func (o *OrderLegCollection) HasQuantityType() bool {
	if o != nil && !IsNil(o.QuantityType) {
		return true
	}

	return false
}

// SetQuantityType gets a reference to the given string and assigns it to the QuantityType field.
func (o *OrderLegCollection) SetQuantityType(v string) {
	o.QuantityType = &v
}

// GetDivCapGains returns the DivCapGains field value if set, zero value otherwise.
func (o *OrderLegCollection) GetDivCapGains() string {
	if o == nil || IsNil(o.DivCapGains) {
		var ret string
		return ret
	}
	return *o.DivCapGains
}

// GetDivCapGainsOk returns a tuple with the DivCapGains field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderLegCollection) GetDivCapGainsOk() (*string, bool) {
	if o == nil || IsNil(o.DivCapGains) {
		return nil, false
	}
	return o.DivCapGains, true
}

// HasDivCapGains returns a boolean if a field has been set.
func (o *OrderLegCollection) HasDivCapGains() bool {
	if o != nil && !IsNil(o.DivCapGains) {
		return true
	}

	return false
}

// SetDivCapGains gets a reference to the given string and assigns it to the DivCapGains field.
func (o *OrderLegCollection) SetDivCapGains(v string) {
	o.DivCapGains = &v
}

// GetToSymbol returns the ToSymbol field value if set, zero value otherwise.
func (o *OrderLegCollection) GetToSymbol() string {
	if o == nil || IsNil(o.ToSymbol) {
		var ret string
		return ret
	}
	return *o.ToSymbol
}

// GetToSymbolOk returns a tuple with the ToSymbol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderLegCollection) GetToSymbolOk() (*string, bool) {
	if o == nil || IsNil(o.ToSymbol) {
		return nil, false
	}
	return o.ToSymbol, true
}

// HasToSymbol returns a boolean if a field has been set.
func (o *OrderLegCollection) HasToSymbol() bool {
	if o != nil && !IsNil(o.ToSymbol) {
		return true
	}

	return false
}

// SetToSymbol gets a reference to the given string and assigns it to the ToSymbol field.
func (o *OrderLegCollection) SetToSymbol(v string) {
	o.ToSymbol = &v
}

func (o OrderLegCollection) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OrderLegCollection) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.OrderLegType) {
		toSerialize["orderLegType"] = o.OrderLegType
	}
	if !IsNil(o.LegId) {
		toSerialize["legId"] = o.LegId
	}
	if o.Instrument != nil {
		toSerialize["instrument"] = o.Instrument
	}
	if !IsNil(o.Instruction) {
		toSerialize["instruction"] = o.Instruction
	}
	if !IsNil(o.PositionEffect) {
		toSerialize["positionEffect"] = o.PositionEffect
	}
	if !IsNil(o.Quantity) {
		toSerialize["quantity"] = o.Quantity
	}
	if !IsNil(o.QuantityType) {
		toSerialize["quantityType"] = o.QuantityType
	}
	if !IsNil(o.DivCapGains) {
		toSerialize["divCapGains"] = o.DivCapGains
	}
	if !IsNil(o.ToSymbol) {
		toSerialize["toSymbol"] = o.ToSymbol
	}
	return toSerialize, nil
}

type NullableOrderLegCollection struct {
	value *OrderLegCollection
	isSet bool
}

func (v NullableOrderLegCollection) Get() *OrderLegCollection {
	return v.value
}

func (v *NullableOrderLegCollection) Set(val *OrderLegCollection) {
	v.value = val
	v.isSet = true
}

func (v NullableOrderLegCollection) IsSet() bool {
	return v.isSet
}

func (v *NullableOrderLegCollection) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrderLegCollection(val *OrderLegCollection) *NullableOrderLegCollection {
	return &NullableOrderLegCollection{value: val, isSet: true}
}

func (v NullableOrderLegCollection) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrderLegCollection) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


