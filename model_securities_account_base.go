/*
Trader API - Account Access and User Preferences

Schwab Trader API access to Account, Order entry and User Preferences

API version: 1.0.0
Contact: TraderAPI@Schwab.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the SecuritiesAccountBase type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SecuritiesAccountBase{}

// SecuritiesAccountBase struct for SecuritiesAccountBase
type SecuritiesAccountBase struct {
	Type *string `json:"type,omitempty"`
	AccountNumber *string `json:"accountNumber,omitempty"`
	RoundTrips *int32 `json:"roundTrips,omitempty"`
	IsDayTrader *bool `json:"isDayTrader,omitempty"`
	IsClosingOnlyRestricted *bool `json:"isClosingOnlyRestricted,omitempty"`
	PfcbFlag *bool `json:"pfcbFlag,omitempty"`
	Positions []Position `json:"positions,omitempty"`
}

// NewSecuritiesAccountBase instantiates a new SecuritiesAccountBase object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSecuritiesAccountBase() *SecuritiesAccountBase {
	this := SecuritiesAccountBase{}
	var isDayTrader bool = false
	this.IsDayTrader = &isDayTrader
	var isClosingOnlyRestricted bool = false
	this.IsClosingOnlyRestricted = &isClosingOnlyRestricted
	var pfcbFlag bool = false
	this.PfcbFlag = &pfcbFlag
	return &this
}

// NewSecuritiesAccountBaseWithDefaults instantiates a new SecuritiesAccountBase object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSecuritiesAccountBaseWithDefaults() *SecuritiesAccountBase {
	this := SecuritiesAccountBase{}
	var isDayTrader bool = false
	this.IsDayTrader = &isDayTrader
	var isClosingOnlyRestricted bool = false
	this.IsClosingOnlyRestricted = &isClosingOnlyRestricted
	var pfcbFlag bool = false
	this.PfcbFlag = &pfcbFlag
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *SecuritiesAccountBase) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecuritiesAccountBase) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *SecuritiesAccountBase) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *SecuritiesAccountBase) SetType(v string) {
	o.Type = &v
}

// GetAccountNumber returns the AccountNumber field value if set, zero value otherwise.
func (o *SecuritiesAccountBase) GetAccountNumber() string {
	if o == nil || IsNil(o.AccountNumber) {
		var ret string
		return ret
	}
	return *o.AccountNumber
}

// GetAccountNumberOk returns a tuple with the AccountNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecuritiesAccountBase) GetAccountNumberOk() (*string, bool) {
	if o == nil || IsNil(o.AccountNumber) {
		return nil, false
	}
	return o.AccountNumber, true
}

// HasAccountNumber returns a boolean if a field has been set.
func (o *SecuritiesAccountBase) HasAccountNumber() bool {
	if o != nil && !IsNil(o.AccountNumber) {
		return true
	}

	return false
}

// SetAccountNumber gets a reference to the given string and assigns it to the AccountNumber field.
func (o *SecuritiesAccountBase) SetAccountNumber(v string) {
	o.AccountNumber = &v
}

// GetRoundTrips returns the RoundTrips field value if set, zero value otherwise.
func (o *SecuritiesAccountBase) GetRoundTrips() int32 {
	if o == nil || IsNil(o.RoundTrips) {
		var ret int32
		return ret
	}
	return *o.RoundTrips
}

// GetRoundTripsOk returns a tuple with the RoundTrips field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecuritiesAccountBase) GetRoundTripsOk() (*int32, bool) {
	if o == nil || IsNil(o.RoundTrips) {
		return nil, false
	}
	return o.RoundTrips, true
}

// HasRoundTrips returns a boolean if a field has been set.
func (o *SecuritiesAccountBase) HasRoundTrips() bool {
	if o != nil && !IsNil(o.RoundTrips) {
		return true
	}

	return false
}

// SetRoundTrips gets a reference to the given int32 and assigns it to the RoundTrips field.
func (o *SecuritiesAccountBase) SetRoundTrips(v int32) {
	o.RoundTrips = &v
}

// GetIsDayTrader returns the IsDayTrader field value if set, zero value otherwise.
func (o *SecuritiesAccountBase) GetIsDayTrader() bool {
	if o == nil || IsNil(o.IsDayTrader) {
		var ret bool
		return ret
	}
	return *o.IsDayTrader
}

// GetIsDayTraderOk returns a tuple with the IsDayTrader field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecuritiesAccountBase) GetIsDayTraderOk() (*bool, bool) {
	if o == nil || IsNil(o.IsDayTrader) {
		return nil, false
	}
	return o.IsDayTrader, true
}

// HasIsDayTrader returns a boolean if a field has been set.
func (o *SecuritiesAccountBase) HasIsDayTrader() bool {
	if o != nil && !IsNil(o.IsDayTrader) {
		return true
	}

	return false
}

// SetIsDayTrader gets a reference to the given bool and assigns it to the IsDayTrader field.
func (o *SecuritiesAccountBase) SetIsDayTrader(v bool) {
	o.IsDayTrader = &v
}

// GetIsClosingOnlyRestricted returns the IsClosingOnlyRestricted field value if set, zero value otherwise.
func (o *SecuritiesAccountBase) GetIsClosingOnlyRestricted() bool {
	if o == nil || IsNil(o.IsClosingOnlyRestricted) {
		var ret bool
		return ret
	}
	return *o.IsClosingOnlyRestricted
}

// GetIsClosingOnlyRestrictedOk returns a tuple with the IsClosingOnlyRestricted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecuritiesAccountBase) GetIsClosingOnlyRestrictedOk() (*bool, bool) {
	if o == nil || IsNil(o.IsClosingOnlyRestricted) {
		return nil, false
	}
	return o.IsClosingOnlyRestricted, true
}

// HasIsClosingOnlyRestricted returns a boolean if a field has been set.
func (o *SecuritiesAccountBase) HasIsClosingOnlyRestricted() bool {
	if o != nil && !IsNil(o.IsClosingOnlyRestricted) {
		return true
	}

	return false
}

// SetIsClosingOnlyRestricted gets a reference to the given bool and assigns it to the IsClosingOnlyRestricted field.
func (o *SecuritiesAccountBase) SetIsClosingOnlyRestricted(v bool) {
	o.IsClosingOnlyRestricted = &v
}

// GetPfcbFlag returns the PfcbFlag field value if set, zero value otherwise.
func (o *SecuritiesAccountBase) GetPfcbFlag() bool {
	if o == nil || IsNil(o.PfcbFlag) {
		var ret bool
		return ret
	}
	return *o.PfcbFlag
}

// GetPfcbFlagOk returns a tuple with the PfcbFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecuritiesAccountBase) GetPfcbFlagOk() (*bool, bool) {
	if o == nil || IsNil(o.PfcbFlag) {
		return nil, false
	}
	return o.PfcbFlag, true
}

// HasPfcbFlag returns a boolean if a field has been set.
func (o *SecuritiesAccountBase) HasPfcbFlag() bool {
	if o != nil && !IsNil(o.PfcbFlag) {
		return true
	}

	return false
}

// SetPfcbFlag gets a reference to the given bool and assigns it to the PfcbFlag field.
func (o *SecuritiesAccountBase) SetPfcbFlag(v bool) {
	o.PfcbFlag = &v
}

// GetPositions returns the Positions field value if set, zero value otherwise.
func (o *SecuritiesAccountBase) GetPositions() []Position {
	if o == nil || IsNil(o.Positions) {
		var ret []Position
		return ret
	}
	return o.Positions
}

// GetPositionsOk returns a tuple with the Positions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecuritiesAccountBase) GetPositionsOk() ([]Position, bool) {
	if o == nil || IsNil(o.Positions) {
		return nil, false
	}
	return o.Positions, true
}

// HasPositions returns a boolean if a field has been set.
func (o *SecuritiesAccountBase) HasPositions() bool {
	if o != nil && !IsNil(o.Positions) {
		return true
	}

	return false
}

// SetPositions gets a reference to the given []Position and assigns it to the Positions field.
func (o *SecuritiesAccountBase) SetPositions(v []Position) {
	o.Positions = v
}

func (o SecuritiesAccountBase) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SecuritiesAccountBase) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.AccountNumber) {
		toSerialize["accountNumber"] = o.AccountNumber
	}
	if !IsNil(o.RoundTrips) {
		toSerialize["roundTrips"] = o.RoundTrips
	}
	if !IsNil(o.IsDayTrader) {
		toSerialize["isDayTrader"] = o.IsDayTrader
	}
	if !IsNil(o.IsClosingOnlyRestricted) {
		toSerialize["isClosingOnlyRestricted"] = o.IsClosingOnlyRestricted
	}
	if !IsNil(o.PfcbFlag) {
		toSerialize["pfcbFlag"] = o.PfcbFlag
	}
	if !IsNil(o.Positions) {
		toSerialize["positions"] = o.Positions
	}
	return toSerialize, nil
}

type NullableSecuritiesAccountBase struct {
	value *SecuritiesAccountBase
	isSet bool
}

func (v NullableSecuritiesAccountBase) Get() *SecuritiesAccountBase {
	return v.value
}

func (v *NullableSecuritiesAccountBase) Set(val *SecuritiesAccountBase) {
	v.value = val
	v.isSet = true
}

func (v NullableSecuritiesAccountBase) IsSet() bool {
	return v.isSet
}

func (v *NullableSecuritiesAccountBase) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSecuritiesAccountBase(val *SecuritiesAccountBase) *NullableSecuritiesAccountBase {
	return &NullableSecuritiesAccountBase{value: val, isSet: true}
}

func (v NullableSecuritiesAccountBase) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSecuritiesAccountBase) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


