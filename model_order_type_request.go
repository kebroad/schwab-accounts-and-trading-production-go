/*
Trader API - Account Access and User Preferences

Schwab Trader API access to Account, Order entry and User Preferences

API version: 1.0.0
Contact: TraderAPI@Schwab.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
)

// OrderTypeRequest Same as orderType, but does not have UNKNOWN since this type is not allowed as an input
type OrderTypeRequest string

// List of orderTypeRequest
const (
	ORDERTYPEREQUEST_MARKET OrderTypeRequest = "MARKET"
	ORDERTYPEREQUEST_LIMIT OrderTypeRequest = "LIMIT"
	ORDERTYPEREQUEST_STOP OrderTypeRequest = "STOP"
	ORDERTYPEREQUEST_STOP_LIMIT OrderTypeRequest = "STOP_LIMIT"
	ORDERTYPEREQUEST_TRAILING_STOP OrderTypeRequest = "TRAILING_STOP"
	ORDERTYPEREQUEST_CABINET OrderTypeRequest = "CABINET"
	ORDERTYPEREQUEST_NON_MARKETABLE OrderTypeRequest = "NON_MARKETABLE"
	ORDERTYPEREQUEST_MARKET_ON_CLOSE OrderTypeRequest = "MARKET_ON_CLOSE"
	ORDERTYPEREQUEST_EXERCISE OrderTypeRequest = "EXERCISE"
	ORDERTYPEREQUEST_TRAILING_STOP_LIMIT OrderTypeRequest = "TRAILING_STOP_LIMIT"
	ORDERTYPEREQUEST_NET_DEBIT OrderTypeRequest = "NET_DEBIT"
	ORDERTYPEREQUEST_NET_CREDIT OrderTypeRequest = "NET_CREDIT"
	ORDERTYPEREQUEST_NET_ZERO OrderTypeRequest = "NET_ZERO"
	ORDERTYPEREQUEST_LIMIT_ON_CLOSE OrderTypeRequest = "LIMIT_ON_CLOSE"
)

// All allowed values of OrderTypeRequest enum
var AllowedOrderTypeRequestEnumValues = []OrderTypeRequest{
	"MARKET",
	"LIMIT",
	"STOP",
	"STOP_LIMIT",
	"TRAILING_STOP",
	"CABINET",
	"NON_MARKETABLE",
	"MARKET_ON_CLOSE",
	"EXERCISE",
	"TRAILING_STOP_LIMIT",
	"NET_DEBIT",
	"NET_CREDIT",
	"NET_ZERO",
	"LIMIT_ON_CLOSE",
}

func (v *OrderTypeRequest) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := OrderTypeRequest(value)
	for _, existing := range AllowedOrderTypeRequestEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid OrderTypeRequest", value)
}

// NewOrderTypeRequestFromValue returns a pointer to a valid OrderTypeRequest
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewOrderTypeRequestFromValue(v string) (*OrderTypeRequest, error) {
	ev := OrderTypeRequest(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for OrderTypeRequest: valid values are %v", v, AllowedOrderTypeRequestEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v OrderTypeRequest) IsValid() bool {
	for _, existing := range AllowedOrderTypeRequestEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to orderTypeRequest value
func (v OrderTypeRequest) Ptr() *OrderTypeRequest {
	return &v
}

type NullableOrderTypeRequest struct {
	value *OrderTypeRequest
	isSet bool
}

func (v NullableOrderTypeRequest) Get() *OrderTypeRequest {
	return v.value
}

func (v *NullableOrderTypeRequest) Set(val *OrderTypeRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableOrderTypeRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableOrderTypeRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrderTypeRequest(val *OrderTypeRequest) *NullableOrderTypeRequest {
	return &NullableOrderTypeRequest{value: val, isSet: true}
}

func (v NullableOrderTypeRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrderTypeRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

