/*
Trader API - Account Access and User Preferences

Schwab Trader API access to Account, Order entry and User Preferences

API version: 1.0.0
Contact: TraderAPI@Schwab.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
)

// TaxLotMethod the model 'TaxLotMethod'
type TaxLotMethod string

// List of taxLotMethod
const (
	TAXLOTMETHOD_FIFO TaxLotMethod = "FIFO"
	TAXLOTMETHOD_LIFO TaxLotMethod = "LIFO"
	TAXLOTMETHOD_HIGH_COST TaxLotMethod = "HIGH_COST"
	TAXLOTMETHOD_LOW_COST TaxLotMethod = "LOW_COST"
	TAXLOTMETHOD_AVERAGE_COST TaxLotMethod = "AVERAGE_COST"
	TAXLOTMETHOD_SPECIFIC_LOT TaxLotMethod = "SPECIFIC_LOT"
	TAXLOTMETHOD_LOSS_HARVESTER TaxLotMethod = "LOSS_HARVESTER"
)

// All allowed values of TaxLotMethod enum
var AllowedTaxLotMethodEnumValues = []TaxLotMethod{
	"FIFO",
	"LIFO",
	"HIGH_COST",
	"LOW_COST",
	"AVERAGE_COST",
	"SPECIFIC_LOT",
	"LOSS_HARVESTER",
}

func (v *TaxLotMethod) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TaxLotMethod(value)
	for _, existing := range AllowedTaxLotMethodEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TaxLotMethod", value)
}

// NewTaxLotMethodFromValue returns a pointer to a valid TaxLotMethod
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTaxLotMethodFromValue(v string) (*TaxLotMethod, error) {
	ev := TaxLotMethod(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TaxLotMethod: valid values are %v", v, AllowedTaxLotMethodEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TaxLotMethod) IsValid() bool {
	for _, existing := range AllowedTaxLotMethodEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to taxLotMethod value
func (v TaxLotMethod) Ptr() *TaxLotMethod {
	return &v
}

type NullableTaxLotMethod struct {
	value *TaxLotMethod
	isSet bool
}

func (v NullableTaxLotMethod) Get() *TaxLotMethod {
	return v.value
}

func (v *NullableTaxLotMethod) Set(val *TaxLotMethod) {
	v.value = val
	v.isSet = true
}

func (v NullableTaxLotMethod) IsSet() bool {
	return v.isSet
}

func (v *NullableTaxLotMethod) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTaxLotMethod(val *TaxLotMethod) *NullableTaxLotMethod {
	return &NullableTaxLotMethod{value: val, isSet: true}
}

func (v NullableTaxLotMethod) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTaxLotMethod) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

