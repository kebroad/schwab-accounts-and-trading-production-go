/*
Trader API - Account Access and User Preferences

Schwab Trader API access to Account, Order entry and User Preferences

API version: 1.0.0
Contact: TraderAPI@Schwab.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
)

// AssetType the model 'AssetType'
type AssetType string

// List of assetType
const (
	ASSETTYPE_EQUITY AssetType = "EQUITY"
	ASSETTYPE_MUTUAL_FUND AssetType = "MUTUAL_FUND"
	ASSETTYPE_OPTION AssetType = "OPTION"
	ASSETTYPE_FUTURE AssetType = "FUTURE"
	ASSETTYPE_FOREX AssetType = "FOREX"
	ASSETTYPE_INDEX AssetType = "INDEX"
	ASSETTYPE_CASH_EQUIVALENT AssetType = "CASH_EQUIVALENT"
	ASSETTYPE_FIXED_INCOME AssetType = "FIXED_INCOME"
	ASSETTYPE_PRODUCT AssetType = "PRODUCT"
	ASSETTYPE_CURRENCY AssetType = "CURRENCY"
	ASSETTYPE_COLLECTIVE_INVESTMENT AssetType = "COLLECTIVE_INVESTMENT"
)

// All allowed values of AssetType enum
var AllowedAssetTypeEnumValues = []AssetType{
	"EQUITY",
	"MUTUAL_FUND",
	"OPTION",
	"FUTURE",
	"FOREX",
	"INDEX",
	"CASH_EQUIVALENT",
	"FIXED_INCOME",
	"PRODUCT",
	"CURRENCY",
	"COLLECTIVE_INVESTMENT",
}

func (v *AssetType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AssetType(value)
	for _, existing := range AllowedAssetTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AssetType", value)
}

// NewAssetTypeFromValue returns a pointer to a valid AssetType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAssetTypeFromValue(v string) (*AssetType, error) {
	ev := AssetType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AssetType: valid values are %v", v, AllowedAssetTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AssetType) IsValid() bool {
	for _, existing := range AllowedAssetTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to assetType value
func (v AssetType) Ptr() *AssetType {
	return &v
}

type NullableAssetType struct {
	value *AssetType
	isSet bool
}

func (v NullableAssetType) Get() *AssetType {
	return v.value
}

func (v *NullableAssetType) Set(val *AssetType) {
	v.value = val
	v.isSet = true
}

func (v NullableAssetType) IsSet() bool {
	return v.isSet
}

func (v *NullableAssetType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAssetType(val *AssetType) *NullableAssetType {
	return &NullableAssetType{value: val, isSet: true}
}

func (v NullableAssetType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAssetType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

