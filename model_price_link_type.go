/*
Trader API - Account Access and User Preferences

Schwab Trader API access to Account, Order entry and User Preferences

API version: 1.0.0
Contact: TraderAPI@Schwab.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
)

// PriceLinkType the model 'PriceLinkType'
type PriceLinkType string

// List of priceLinkType
const (
	PRICELINKTYPE_VALUE PriceLinkType = "VALUE"
	PRICELINKTYPE_PERCENT PriceLinkType = "PERCENT"
	PRICELINKTYPE_TICK PriceLinkType = "TICK"
)

// All allowed values of PriceLinkType enum
var AllowedPriceLinkTypeEnumValues = []PriceLinkType{
	"VALUE",
	"PERCENT",
	"TICK",
}

func (v *PriceLinkType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PriceLinkType(value)
	for _, existing := range AllowedPriceLinkTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PriceLinkType", value)
}

// NewPriceLinkTypeFromValue returns a pointer to a valid PriceLinkType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPriceLinkTypeFromValue(v string) (*PriceLinkType, error) {
	ev := PriceLinkType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PriceLinkType: valid values are %v", v, AllowedPriceLinkTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PriceLinkType) IsValid() bool {
	for _, existing := range AllowedPriceLinkTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to priceLinkType value
func (v PriceLinkType) Ptr() *PriceLinkType {
	return &v
}

type NullablePriceLinkType struct {
	value *PriceLinkType
	isSet bool
}

func (v NullablePriceLinkType) Get() *PriceLinkType {
	return v.value
}

func (v *NullablePriceLinkType) Set(val *PriceLinkType) {
	v.value = val
	v.isSet = true
}

func (v NullablePriceLinkType) IsSet() bool {
	return v.isSet
}

func (v *NullablePriceLinkType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePriceLinkType(val *PriceLinkType) *NullablePriceLinkType {
	return &NullablePriceLinkType{value: val, isSet: true}
}

func (v NullablePriceLinkType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePriceLinkType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

