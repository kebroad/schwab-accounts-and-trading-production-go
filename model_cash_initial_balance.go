/*
Trader API - Account Access and User Preferences

Schwab Trader API access to Account, Order entry and User Preferences

API version: 1.0.0
Contact: TraderAPI@Schwab.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the CashInitialBalance type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CashInitialBalance{}

// CashInitialBalance struct for CashInitialBalance
type CashInitialBalance struct {
	AccruedInterest *float64 `json:"accruedInterest,omitempty"`
	CashAvailableForTrading *float64 `json:"cashAvailableForTrading,omitempty"`
	CashAvailableForWithdrawal *float64 `json:"cashAvailableForWithdrawal,omitempty"`
	CashBalance *float64 `json:"cashBalance,omitempty"`
	BondValue *float64 `json:"bondValue,omitempty"`
	CashReceipts *float64 `json:"cashReceipts,omitempty"`
	LiquidationValue *float64 `json:"liquidationValue,omitempty"`
	LongOptionMarketValue *float64 `json:"longOptionMarketValue,omitempty"`
	LongStockValue *float64 `json:"longStockValue,omitempty"`
	MoneyMarketFund *float64 `json:"moneyMarketFund,omitempty"`
	MutualFundValue *float64 `json:"mutualFundValue,omitempty"`
	ShortOptionMarketValue *float64 `json:"shortOptionMarketValue,omitempty"`
	ShortStockValue *float64 `json:"shortStockValue,omitempty"`
	IsInCall *float64 `json:"isInCall,omitempty"`
	UnsettledCash *float64 `json:"unsettledCash,omitempty"`
	CashDebitCallValue *float64 `json:"cashDebitCallValue,omitempty"`
	PendingDeposits *float64 `json:"pendingDeposits,omitempty"`
	AccountValue *float64 `json:"accountValue,omitempty"`
}

// NewCashInitialBalance instantiates a new CashInitialBalance object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCashInitialBalance() *CashInitialBalance {
	this := CashInitialBalance{}
	return &this
}

// NewCashInitialBalanceWithDefaults instantiates a new CashInitialBalance object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCashInitialBalanceWithDefaults() *CashInitialBalance {
	this := CashInitialBalance{}
	return &this
}

// GetAccruedInterest returns the AccruedInterest field value if set, zero value otherwise.
func (o *CashInitialBalance) GetAccruedInterest() float64 {
	if o == nil || IsNil(o.AccruedInterest) {
		var ret float64
		return ret
	}
	return *o.AccruedInterest
}

// GetAccruedInterestOk returns a tuple with the AccruedInterest field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CashInitialBalance) GetAccruedInterestOk() (*float64, bool) {
	if o == nil || IsNil(o.AccruedInterest) {
		return nil, false
	}
	return o.AccruedInterest, true
}

// HasAccruedInterest returns a boolean if a field has been set.
func (o *CashInitialBalance) HasAccruedInterest() bool {
	if o != nil && !IsNil(o.AccruedInterest) {
		return true
	}

	return false
}

// SetAccruedInterest gets a reference to the given float64 and assigns it to the AccruedInterest field.
func (o *CashInitialBalance) SetAccruedInterest(v float64) {
	o.AccruedInterest = &v
}

// GetCashAvailableForTrading returns the CashAvailableForTrading field value if set, zero value otherwise.
func (o *CashInitialBalance) GetCashAvailableForTrading() float64 {
	if o == nil || IsNil(o.CashAvailableForTrading) {
		var ret float64
		return ret
	}
	return *o.CashAvailableForTrading
}

// GetCashAvailableForTradingOk returns a tuple with the CashAvailableForTrading field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CashInitialBalance) GetCashAvailableForTradingOk() (*float64, bool) {
	if o == nil || IsNil(o.CashAvailableForTrading) {
		return nil, false
	}
	return o.CashAvailableForTrading, true
}

// HasCashAvailableForTrading returns a boolean if a field has been set.
func (o *CashInitialBalance) HasCashAvailableForTrading() bool {
	if o != nil && !IsNil(o.CashAvailableForTrading) {
		return true
	}

	return false
}

// SetCashAvailableForTrading gets a reference to the given float64 and assigns it to the CashAvailableForTrading field.
func (o *CashInitialBalance) SetCashAvailableForTrading(v float64) {
	o.CashAvailableForTrading = &v
}

// GetCashAvailableForWithdrawal returns the CashAvailableForWithdrawal field value if set, zero value otherwise.
func (o *CashInitialBalance) GetCashAvailableForWithdrawal() float64 {
	if o == nil || IsNil(o.CashAvailableForWithdrawal) {
		var ret float64
		return ret
	}
	return *o.CashAvailableForWithdrawal
}

// GetCashAvailableForWithdrawalOk returns a tuple with the CashAvailableForWithdrawal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CashInitialBalance) GetCashAvailableForWithdrawalOk() (*float64, bool) {
	if o == nil || IsNil(o.CashAvailableForWithdrawal) {
		return nil, false
	}
	return o.CashAvailableForWithdrawal, true
}

// HasCashAvailableForWithdrawal returns a boolean if a field has been set.
func (o *CashInitialBalance) HasCashAvailableForWithdrawal() bool {
	if o != nil && !IsNil(o.CashAvailableForWithdrawal) {
		return true
	}

	return false
}

// SetCashAvailableForWithdrawal gets a reference to the given float64 and assigns it to the CashAvailableForWithdrawal field.
func (o *CashInitialBalance) SetCashAvailableForWithdrawal(v float64) {
	o.CashAvailableForWithdrawal = &v
}

// GetCashBalance returns the CashBalance field value if set, zero value otherwise.
func (o *CashInitialBalance) GetCashBalance() float64 {
	if o == nil || IsNil(o.CashBalance) {
		var ret float64
		return ret
	}
	return *o.CashBalance
}

// GetCashBalanceOk returns a tuple with the CashBalance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CashInitialBalance) GetCashBalanceOk() (*float64, bool) {
	if o == nil || IsNil(o.CashBalance) {
		return nil, false
	}
	return o.CashBalance, true
}

// HasCashBalance returns a boolean if a field has been set.
func (o *CashInitialBalance) HasCashBalance() bool {
	if o != nil && !IsNil(o.CashBalance) {
		return true
	}

	return false
}

// SetCashBalance gets a reference to the given float64 and assigns it to the CashBalance field.
func (o *CashInitialBalance) SetCashBalance(v float64) {
	o.CashBalance = &v
}

// GetBondValue returns the BondValue field value if set, zero value otherwise.
func (o *CashInitialBalance) GetBondValue() float64 {
	if o == nil || IsNil(o.BondValue) {
		var ret float64
		return ret
	}
	return *o.BondValue
}

// GetBondValueOk returns a tuple with the BondValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CashInitialBalance) GetBondValueOk() (*float64, bool) {
	if o == nil || IsNil(o.BondValue) {
		return nil, false
	}
	return o.BondValue, true
}

// HasBondValue returns a boolean if a field has been set.
func (o *CashInitialBalance) HasBondValue() bool {
	if o != nil && !IsNil(o.BondValue) {
		return true
	}

	return false
}

// SetBondValue gets a reference to the given float64 and assigns it to the BondValue field.
func (o *CashInitialBalance) SetBondValue(v float64) {
	o.BondValue = &v
}

// GetCashReceipts returns the CashReceipts field value if set, zero value otherwise.
func (o *CashInitialBalance) GetCashReceipts() float64 {
	if o == nil || IsNil(o.CashReceipts) {
		var ret float64
		return ret
	}
	return *o.CashReceipts
}

// GetCashReceiptsOk returns a tuple with the CashReceipts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CashInitialBalance) GetCashReceiptsOk() (*float64, bool) {
	if o == nil || IsNil(o.CashReceipts) {
		return nil, false
	}
	return o.CashReceipts, true
}

// HasCashReceipts returns a boolean if a field has been set.
func (o *CashInitialBalance) HasCashReceipts() bool {
	if o != nil && !IsNil(o.CashReceipts) {
		return true
	}

	return false
}

// SetCashReceipts gets a reference to the given float64 and assigns it to the CashReceipts field.
func (o *CashInitialBalance) SetCashReceipts(v float64) {
	o.CashReceipts = &v
}

// GetLiquidationValue returns the LiquidationValue field value if set, zero value otherwise.
func (o *CashInitialBalance) GetLiquidationValue() float64 {
	if o == nil || IsNil(o.LiquidationValue) {
		var ret float64
		return ret
	}
	return *o.LiquidationValue
}

// GetLiquidationValueOk returns a tuple with the LiquidationValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CashInitialBalance) GetLiquidationValueOk() (*float64, bool) {
	if o == nil || IsNil(o.LiquidationValue) {
		return nil, false
	}
	return o.LiquidationValue, true
}

// HasLiquidationValue returns a boolean if a field has been set.
func (o *CashInitialBalance) HasLiquidationValue() bool {
	if o != nil && !IsNil(o.LiquidationValue) {
		return true
	}

	return false
}

// SetLiquidationValue gets a reference to the given float64 and assigns it to the LiquidationValue field.
func (o *CashInitialBalance) SetLiquidationValue(v float64) {
	o.LiquidationValue = &v
}

// GetLongOptionMarketValue returns the LongOptionMarketValue field value if set, zero value otherwise.
func (o *CashInitialBalance) GetLongOptionMarketValue() float64 {
	if o == nil || IsNil(o.LongOptionMarketValue) {
		var ret float64
		return ret
	}
	return *o.LongOptionMarketValue
}

// GetLongOptionMarketValueOk returns a tuple with the LongOptionMarketValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CashInitialBalance) GetLongOptionMarketValueOk() (*float64, bool) {
	if o == nil || IsNil(o.LongOptionMarketValue) {
		return nil, false
	}
	return o.LongOptionMarketValue, true
}

// HasLongOptionMarketValue returns a boolean if a field has been set.
func (o *CashInitialBalance) HasLongOptionMarketValue() bool {
	if o != nil && !IsNil(o.LongOptionMarketValue) {
		return true
	}

	return false
}

// SetLongOptionMarketValue gets a reference to the given float64 and assigns it to the LongOptionMarketValue field.
func (o *CashInitialBalance) SetLongOptionMarketValue(v float64) {
	o.LongOptionMarketValue = &v
}

// GetLongStockValue returns the LongStockValue field value if set, zero value otherwise.
func (o *CashInitialBalance) GetLongStockValue() float64 {
	if o == nil || IsNil(o.LongStockValue) {
		var ret float64
		return ret
	}
	return *o.LongStockValue
}

// GetLongStockValueOk returns a tuple with the LongStockValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CashInitialBalance) GetLongStockValueOk() (*float64, bool) {
	if o == nil || IsNil(o.LongStockValue) {
		return nil, false
	}
	return o.LongStockValue, true
}

// HasLongStockValue returns a boolean if a field has been set.
func (o *CashInitialBalance) HasLongStockValue() bool {
	if o != nil && !IsNil(o.LongStockValue) {
		return true
	}

	return false
}

// SetLongStockValue gets a reference to the given float64 and assigns it to the LongStockValue field.
func (o *CashInitialBalance) SetLongStockValue(v float64) {
	o.LongStockValue = &v
}

// GetMoneyMarketFund returns the MoneyMarketFund field value if set, zero value otherwise.
func (o *CashInitialBalance) GetMoneyMarketFund() float64 {
	if o == nil || IsNil(o.MoneyMarketFund) {
		var ret float64
		return ret
	}
	return *o.MoneyMarketFund
}

// GetMoneyMarketFundOk returns a tuple with the MoneyMarketFund field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CashInitialBalance) GetMoneyMarketFundOk() (*float64, bool) {
	if o == nil || IsNil(o.MoneyMarketFund) {
		return nil, false
	}
	return o.MoneyMarketFund, true
}

// HasMoneyMarketFund returns a boolean if a field has been set.
func (o *CashInitialBalance) HasMoneyMarketFund() bool {
	if o != nil && !IsNil(o.MoneyMarketFund) {
		return true
	}

	return false
}

// SetMoneyMarketFund gets a reference to the given float64 and assigns it to the MoneyMarketFund field.
func (o *CashInitialBalance) SetMoneyMarketFund(v float64) {
	o.MoneyMarketFund = &v
}

// GetMutualFundValue returns the MutualFundValue field value if set, zero value otherwise.
func (o *CashInitialBalance) GetMutualFundValue() float64 {
	if o == nil || IsNil(o.MutualFundValue) {
		var ret float64
		return ret
	}
	return *o.MutualFundValue
}

// GetMutualFundValueOk returns a tuple with the MutualFundValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CashInitialBalance) GetMutualFundValueOk() (*float64, bool) {
	if o == nil || IsNil(o.MutualFundValue) {
		return nil, false
	}
	return o.MutualFundValue, true
}

// HasMutualFundValue returns a boolean if a field has been set.
func (o *CashInitialBalance) HasMutualFundValue() bool {
	if o != nil && !IsNil(o.MutualFundValue) {
		return true
	}

	return false
}

// SetMutualFundValue gets a reference to the given float64 and assigns it to the MutualFundValue field.
func (o *CashInitialBalance) SetMutualFundValue(v float64) {
	o.MutualFundValue = &v
}

// GetShortOptionMarketValue returns the ShortOptionMarketValue field value if set, zero value otherwise.
func (o *CashInitialBalance) GetShortOptionMarketValue() float64 {
	if o == nil || IsNil(o.ShortOptionMarketValue) {
		var ret float64
		return ret
	}
	return *o.ShortOptionMarketValue
}

// GetShortOptionMarketValueOk returns a tuple with the ShortOptionMarketValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CashInitialBalance) GetShortOptionMarketValueOk() (*float64, bool) {
	if o == nil || IsNil(o.ShortOptionMarketValue) {
		return nil, false
	}
	return o.ShortOptionMarketValue, true
}

// HasShortOptionMarketValue returns a boolean if a field has been set.
func (o *CashInitialBalance) HasShortOptionMarketValue() bool {
	if o != nil && !IsNil(o.ShortOptionMarketValue) {
		return true
	}

	return false
}

// SetShortOptionMarketValue gets a reference to the given float64 and assigns it to the ShortOptionMarketValue field.
func (o *CashInitialBalance) SetShortOptionMarketValue(v float64) {
	o.ShortOptionMarketValue = &v
}

// GetShortStockValue returns the ShortStockValue field value if set, zero value otherwise.
func (o *CashInitialBalance) GetShortStockValue() float64 {
	if o == nil || IsNil(o.ShortStockValue) {
		var ret float64
		return ret
	}
	return *o.ShortStockValue
}

// GetShortStockValueOk returns a tuple with the ShortStockValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CashInitialBalance) GetShortStockValueOk() (*float64, bool) {
	if o == nil || IsNil(o.ShortStockValue) {
		return nil, false
	}
	return o.ShortStockValue, true
}

// HasShortStockValue returns a boolean if a field has been set.
func (o *CashInitialBalance) HasShortStockValue() bool {
	if o != nil && !IsNil(o.ShortStockValue) {
		return true
	}

	return false
}

// SetShortStockValue gets a reference to the given float64 and assigns it to the ShortStockValue field.
func (o *CashInitialBalance) SetShortStockValue(v float64) {
	o.ShortStockValue = &v
}

// GetIsInCall returns the IsInCall field value if set, zero value otherwise.
func (o *CashInitialBalance) GetIsInCall() float64 {
	if o == nil || IsNil(o.IsInCall) {
		var ret float64
		return ret
	}
	return *o.IsInCall
}

// GetIsInCallOk returns a tuple with the IsInCall field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CashInitialBalance) GetIsInCallOk() (*float64, bool) {
	if o == nil || IsNil(o.IsInCall) {
		return nil, false
	}
	return o.IsInCall, true
}

// HasIsInCall returns a boolean if a field has been set.
func (o *CashInitialBalance) HasIsInCall() bool {
	if o != nil && !IsNil(o.IsInCall) {
		return true
	}

	return false
}

// SetIsInCall gets a reference to the given float64 and assigns it to the IsInCall field.
func (o *CashInitialBalance) SetIsInCall(v float64) {
	o.IsInCall = &v
}

// GetUnsettledCash returns the UnsettledCash field value if set, zero value otherwise.
func (o *CashInitialBalance) GetUnsettledCash() float64 {
	if o == nil || IsNil(o.UnsettledCash) {
		var ret float64
		return ret
	}
	return *o.UnsettledCash
}

// GetUnsettledCashOk returns a tuple with the UnsettledCash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CashInitialBalance) GetUnsettledCashOk() (*float64, bool) {
	if o == nil || IsNil(o.UnsettledCash) {
		return nil, false
	}
	return o.UnsettledCash, true
}

// HasUnsettledCash returns a boolean if a field has been set.
func (o *CashInitialBalance) HasUnsettledCash() bool {
	if o != nil && !IsNil(o.UnsettledCash) {
		return true
	}

	return false
}

// SetUnsettledCash gets a reference to the given float64 and assigns it to the UnsettledCash field.
func (o *CashInitialBalance) SetUnsettledCash(v float64) {
	o.UnsettledCash = &v
}

// GetCashDebitCallValue returns the CashDebitCallValue field value if set, zero value otherwise.
func (o *CashInitialBalance) GetCashDebitCallValue() float64 {
	if o == nil || IsNil(o.CashDebitCallValue) {
		var ret float64
		return ret
	}
	return *o.CashDebitCallValue
}

// GetCashDebitCallValueOk returns a tuple with the CashDebitCallValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CashInitialBalance) GetCashDebitCallValueOk() (*float64, bool) {
	if o == nil || IsNil(o.CashDebitCallValue) {
		return nil, false
	}
	return o.CashDebitCallValue, true
}

// HasCashDebitCallValue returns a boolean if a field has been set.
func (o *CashInitialBalance) HasCashDebitCallValue() bool {
	if o != nil && !IsNil(o.CashDebitCallValue) {
		return true
	}

	return false
}

// SetCashDebitCallValue gets a reference to the given float64 and assigns it to the CashDebitCallValue field.
func (o *CashInitialBalance) SetCashDebitCallValue(v float64) {
	o.CashDebitCallValue = &v
}

// GetPendingDeposits returns the PendingDeposits field value if set, zero value otherwise.
func (o *CashInitialBalance) GetPendingDeposits() float64 {
	if o == nil || IsNil(o.PendingDeposits) {
		var ret float64
		return ret
	}
	return *o.PendingDeposits
}

// GetPendingDepositsOk returns a tuple with the PendingDeposits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CashInitialBalance) GetPendingDepositsOk() (*float64, bool) {
	if o == nil || IsNil(o.PendingDeposits) {
		return nil, false
	}
	return o.PendingDeposits, true
}

// HasPendingDeposits returns a boolean if a field has been set.
func (o *CashInitialBalance) HasPendingDeposits() bool {
	if o != nil && !IsNil(o.PendingDeposits) {
		return true
	}

	return false
}

// SetPendingDeposits gets a reference to the given float64 and assigns it to the PendingDeposits field.
func (o *CashInitialBalance) SetPendingDeposits(v float64) {
	o.PendingDeposits = &v
}

// GetAccountValue returns the AccountValue field value if set, zero value otherwise.
func (o *CashInitialBalance) GetAccountValue() float64 {
	if o == nil || IsNil(o.AccountValue) {
		var ret float64
		return ret
	}
	return *o.AccountValue
}

// GetAccountValueOk returns a tuple with the AccountValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CashInitialBalance) GetAccountValueOk() (*float64, bool) {
	if o == nil || IsNil(o.AccountValue) {
		return nil, false
	}
	return o.AccountValue, true
}

// HasAccountValue returns a boolean if a field has been set.
func (o *CashInitialBalance) HasAccountValue() bool {
	if o != nil && !IsNil(o.AccountValue) {
		return true
	}

	return false
}

// SetAccountValue gets a reference to the given float64 and assigns it to the AccountValue field.
func (o *CashInitialBalance) SetAccountValue(v float64) {
	o.AccountValue = &v
}

func (o CashInitialBalance) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CashInitialBalance) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AccruedInterest) {
		toSerialize["accruedInterest"] = o.AccruedInterest
	}
	if !IsNil(o.CashAvailableForTrading) {
		toSerialize["cashAvailableForTrading"] = o.CashAvailableForTrading
	}
	if !IsNil(o.CashAvailableForWithdrawal) {
		toSerialize["cashAvailableForWithdrawal"] = o.CashAvailableForWithdrawal
	}
	if !IsNil(o.CashBalance) {
		toSerialize["cashBalance"] = o.CashBalance
	}
	if !IsNil(o.BondValue) {
		toSerialize["bondValue"] = o.BondValue
	}
	if !IsNil(o.CashReceipts) {
		toSerialize["cashReceipts"] = o.CashReceipts
	}
	if !IsNil(o.LiquidationValue) {
		toSerialize["liquidationValue"] = o.LiquidationValue
	}
	if !IsNil(o.LongOptionMarketValue) {
		toSerialize["longOptionMarketValue"] = o.LongOptionMarketValue
	}
	if !IsNil(o.LongStockValue) {
		toSerialize["longStockValue"] = o.LongStockValue
	}
	if !IsNil(o.MoneyMarketFund) {
		toSerialize["moneyMarketFund"] = o.MoneyMarketFund
	}
	if !IsNil(o.MutualFundValue) {
		toSerialize["mutualFundValue"] = o.MutualFundValue
	}
	if !IsNil(o.ShortOptionMarketValue) {
		toSerialize["shortOptionMarketValue"] = o.ShortOptionMarketValue
	}
	if !IsNil(o.ShortStockValue) {
		toSerialize["shortStockValue"] = o.ShortStockValue
	}
	if !IsNil(o.IsInCall) {
		toSerialize["isInCall"] = o.IsInCall
	}
	if !IsNil(o.UnsettledCash) {
		toSerialize["unsettledCash"] = o.UnsettledCash
	}
	if !IsNil(o.CashDebitCallValue) {
		toSerialize["cashDebitCallValue"] = o.CashDebitCallValue
	}
	if !IsNil(o.PendingDeposits) {
		toSerialize["pendingDeposits"] = o.PendingDeposits
	}
	if !IsNil(o.AccountValue) {
		toSerialize["accountValue"] = o.AccountValue
	}
	return toSerialize, nil
}

type NullableCashInitialBalance struct {
	value *CashInitialBalance
	isSet bool
}

func (v NullableCashInitialBalance) Get() *CashInitialBalance {
	return v.value
}

func (v *NullableCashInitialBalance) Set(val *CashInitialBalance) {
	v.value = val
	v.isSet = true
}

func (v NullableCashInitialBalance) IsSet() bool {
	return v.isSet
}

func (v *NullableCashInitialBalance) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCashInitialBalance(val *CashInitialBalance) *NullableCashInitialBalance {
	return &NullableCashInitialBalance{value: val, isSet: true}
}

func (v NullableCashInitialBalance) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCashInitialBalance) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


