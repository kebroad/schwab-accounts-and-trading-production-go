/*
Trader API - Account Access and User Preferences

Schwab Trader API access to Account, Order entry and User Preferences

API version: 1.0.0
Contact: TraderAPI@Schwab.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
)

// SpecialInstruction the model 'SpecialInstruction'
type SpecialInstruction string

// List of specialInstruction
const (
	SPECIALINSTRUCTION_ALL_OR_NONE SpecialInstruction = "ALL_OR_NONE"
	SPECIALINSTRUCTION_DO_NOT_REDUCE SpecialInstruction = "DO_NOT_REDUCE"
	SPECIALINSTRUCTION_ALL_OR_NONE_DO_NOT_REDUCE SpecialInstruction = "ALL_OR_NONE_DO_NOT_REDUCE"
)

// All allowed values of SpecialInstruction enum
var AllowedSpecialInstructionEnumValues = []SpecialInstruction{
	"ALL_OR_NONE",
	"DO_NOT_REDUCE",
	"ALL_OR_NONE_DO_NOT_REDUCE",
}

func (v *SpecialInstruction) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SpecialInstruction(value)
	for _, existing := range AllowedSpecialInstructionEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SpecialInstruction", value)
}

// NewSpecialInstructionFromValue returns a pointer to a valid SpecialInstruction
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSpecialInstructionFromValue(v string) (*SpecialInstruction, error) {
	ev := SpecialInstruction(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SpecialInstruction: valid values are %v", v, AllowedSpecialInstructionEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SpecialInstruction) IsValid() bool {
	for _, existing := range AllowedSpecialInstructionEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to specialInstruction value
func (v SpecialInstruction) Ptr() *SpecialInstruction {
	return &v
}

type NullableSpecialInstruction struct {
	value *SpecialInstruction
	isSet bool
}

func (v NullableSpecialInstruction) Get() *SpecialInstruction {
	return v.value
}

func (v *NullableSpecialInstruction) Set(val *SpecialInstruction) {
	v.value = val
	v.isSet = true
}

func (v NullableSpecialInstruction) IsSet() bool {
	return v.isSet
}

func (v *NullableSpecialInstruction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSpecialInstruction(val *SpecialInstruction) *NullableSpecialInstruction {
	return &NullableSpecialInstruction{value: val, isSet: true}
}

func (v NullableSpecialInstruction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSpecialInstruction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

