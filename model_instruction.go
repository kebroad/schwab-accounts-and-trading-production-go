/*
Trader API - Account Access and User Preferences

Schwab Trader API access to Account, Order entry and User Preferences

API version: 1.0.0
Contact: TraderAPI@Schwab.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
)

// Instruction the model 'Instruction'
type Instruction string

// List of instruction
const (
	INSTRUCTION_BUY Instruction = "BUY"
	INSTRUCTION_SELL Instruction = "SELL"
	INSTRUCTION_BUY_TO_COVER Instruction = "BUY_TO_COVER"
	INSTRUCTION_SELL_SHORT Instruction = "SELL_SHORT"
	INSTRUCTION_BUY_TO_OPEN Instruction = "BUY_TO_OPEN"
	INSTRUCTION_BUY_TO_CLOSE Instruction = "BUY_TO_CLOSE"
	INSTRUCTION_SELL_TO_OPEN Instruction = "SELL_TO_OPEN"
	INSTRUCTION_SELL_TO_CLOSE Instruction = "SELL_TO_CLOSE"
	INSTRUCTION_EXCHANGE Instruction = "EXCHANGE"
	INSTRUCTION_SELL_SHORT_EXEMPT Instruction = "SELL_SHORT_EXEMPT"
)

// All allowed values of Instruction enum
var AllowedInstructionEnumValues = []Instruction{
	"BUY",
	"SELL",
	"BUY_TO_COVER",
	"SELL_SHORT",
	"BUY_TO_OPEN",
	"BUY_TO_CLOSE",
	"SELL_TO_OPEN",
	"SELL_TO_CLOSE",
	"EXCHANGE",
	"SELL_SHORT_EXEMPT",
}

func (v *Instruction) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := Instruction(value)
	for _, existing := range AllowedInstructionEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Instruction", value)
}

// NewInstructionFromValue returns a pointer to a valid Instruction
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewInstructionFromValue(v string) (*Instruction, error) {
	ev := Instruction(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for Instruction: valid values are %v", v, AllowedInstructionEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Instruction) IsValid() bool {
	for _, existing := range AllowedInstructionEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to instruction value
func (v Instruction) Ptr() *Instruction {
	return &v
}

type NullableInstruction struct {
	value *Instruction
	isSet bool
}

func (v NullableInstruction) Get() *Instruction {
	return v.value
}

func (v *NullableInstruction) Set(val *Instruction) {
	v.value = val
	v.isSet = true
}

func (v NullableInstruction) IsSet() bool {
	return v.isSet
}

func (v *NullableInstruction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInstruction(val *Instruction) *NullableInstruction {
	return &NullableInstruction{value: val, isSet: true}
}

func (v NullableInstruction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInstruction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

