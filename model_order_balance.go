/*
Trader API - Account Access and User Preferences

Schwab Trader API access to Account, Order entry and User Preferences

API version: 1.0.0
Contact: TraderAPI@Schwab.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the OrderBalance type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OrderBalance{}

// OrderBalance struct for OrderBalance
type OrderBalance struct {
	OrderValue *float64 `json:"orderValue,omitempty"`
	ProjectedAvailableFund *float64 `json:"projectedAvailableFund,omitempty"`
	ProjectedBuyingPower *float64 `json:"projectedBuyingPower,omitempty"`
	ProjectedCommission *float64 `json:"projectedCommission,omitempty"`
}

// NewOrderBalance instantiates a new OrderBalance object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOrderBalance() *OrderBalance {
	this := OrderBalance{}
	return &this
}

// NewOrderBalanceWithDefaults instantiates a new OrderBalance object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOrderBalanceWithDefaults() *OrderBalance {
	this := OrderBalance{}
	return &this
}

// GetOrderValue returns the OrderValue field value if set, zero value otherwise.
func (o *OrderBalance) GetOrderValue() float64 {
	if o == nil || IsNil(o.OrderValue) {
		var ret float64
		return ret
	}
	return *o.OrderValue
}

// GetOrderValueOk returns a tuple with the OrderValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderBalance) GetOrderValueOk() (*float64, bool) {
	if o == nil || IsNil(o.OrderValue) {
		return nil, false
	}
	return o.OrderValue, true
}

// HasOrderValue returns a boolean if a field has been set.
func (o *OrderBalance) HasOrderValue() bool {
	if o != nil && !IsNil(o.OrderValue) {
		return true
	}

	return false
}

// SetOrderValue gets a reference to the given float64 and assigns it to the OrderValue field.
func (o *OrderBalance) SetOrderValue(v float64) {
	o.OrderValue = &v
}

// GetProjectedAvailableFund returns the ProjectedAvailableFund field value if set, zero value otherwise.
func (o *OrderBalance) GetProjectedAvailableFund() float64 {
	if o == nil || IsNil(o.ProjectedAvailableFund) {
		var ret float64
		return ret
	}
	return *o.ProjectedAvailableFund
}

// GetProjectedAvailableFundOk returns a tuple with the ProjectedAvailableFund field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderBalance) GetProjectedAvailableFundOk() (*float64, bool) {
	if o == nil || IsNil(o.ProjectedAvailableFund) {
		return nil, false
	}
	return o.ProjectedAvailableFund, true
}

// HasProjectedAvailableFund returns a boolean if a field has been set.
func (o *OrderBalance) HasProjectedAvailableFund() bool {
	if o != nil && !IsNil(o.ProjectedAvailableFund) {
		return true
	}

	return false
}

// SetProjectedAvailableFund gets a reference to the given float64 and assigns it to the ProjectedAvailableFund field.
func (o *OrderBalance) SetProjectedAvailableFund(v float64) {
	o.ProjectedAvailableFund = &v
}

// GetProjectedBuyingPower returns the ProjectedBuyingPower field value if set, zero value otherwise.
func (o *OrderBalance) GetProjectedBuyingPower() float64 {
	if o == nil || IsNil(o.ProjectedBuyingPower) {
		var ret float64
		return ret
	}
	return *o.ProjectedBuyingPower
}

// GetProjectedBuyingPowerOk returns a tuple with the ProjectedBuyingPower field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderBalance) GetProjectedBuyingPowerOk() (*float64, bool) {
	if o == nil || IsNil(o.ProjectedBuyingPower) {
		return nil, false
	}
	return o.ProjectedBuyingPower, true
}

// HasProjectedBuyingPower returns a boolean if a field has been set.
func (o *OrderBalance) HasProjectedBuyingPower() bool {
	if o != nil && !IsNil(o.ProjectedBuyingPower) {
		return true
	}

	return false
}

// SetProjectedBuyingPower gets a reference to the given float64 and assigns it to the ProjectedBuyingPower field.
func (o *OrderBalance) SetProjectedBuyingPower(v float64) {
	o.ProjectedBuyingPower = &v
}

// GetProjectedCommission returns the ProjectedCommission field value if set, zero value otherwise.
func (o *OrderBalance) GetProjectedCommission() float64 {
	if o == nil || IsNil(o.ProjectedCommission) {
		var ret float64
		return ret
	}
	return *o.ProjectedCommission
}

// GetProjectedCommissionOk returns a tuple with the ProjectedCommission field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderBalance) GetProjectedCommissionOk() (*float64, bool) {
	if o == nil || IsNil(o.ProjectedCommission) {
		return nil, false
	}
	return o.ProjectedCommission, true
}

// HasProjectedCommission returns a boolean if a field has been set.
func (o *OrderBalance) HasProjectedCommission() bool {
	if o != nil && !IsNil(o.ProjectedCommission) {
		return true
	}

	return false
}

// SetProjectedCommission gets a reference to the given float64 and assigns it to the ProjectedCommission field.
func (o *OrderBalance) SetProjectedCommission(v float64) {
	o.ProjectedCommission = &v
}

func (o OrderBalance) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OrderBalance) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.OrderValue) {
		toSerialize["orderValue"] = o.OrderValue
	}
	if !IsNil(o.ProjectedAvailableFund) {
		toSerialize["projectedAvailableFund"] = o.ProjectedAvailableFund
	}
	if !IsNil(o.ProjectedBuyingPower) {
		toSerialize["projectedBuyingPower"] = o.ProjectedBuyingPower
	}
	if !IsNil(o.ProjectedCommission) {
		toSerialize["projectedCommission"] = o.ProjectedCommission
	}
	return toSerialize, nil
}

type NullableOrderBalance struct {
	value *OrderBalance
	isSet bool
}

func (v NullableOrderBalance) Get() *OrderBalance {
	return v.value
}

func (v *NullableOrderBalance) Set(val *OrderBalance) {
	v.value = val
	v.isSet = true
}

func (v NullableOrderBalance) IsSet() bool {
	return v.isSet
}

func (v *NullableOrderBalance) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrderBalance(val *OrderBalance) *NullableOrderBalance {
	return &NullableOrderBalance{value: val, isSet: true}
}

func (v NullableOrderBalance) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrderBalance) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


