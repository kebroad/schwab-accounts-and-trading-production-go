/*
Trader API - Account Access and User Preferences

Schwab Trader API access to Account, Order entry and User Preferences

API version: 1.0.0
Contact: TraderAPI@Schwab.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the DateParam type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DateParam{}

// DateParam struct for DateParam
type DateParam struct {
	// Valid ISO-8601 format is :<br> <code>yyyy-MM-dd'T'HH:mm:ss.SSSZ</code>
	Date *string `json:"date,omitempty"`
}

// NewDateParam instantiates a new DateParam object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDateParam() *DateParam {
	this := DateParam{}
	return &this
}

// NewDateParamWithDefaults instantiates a new DateParam object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDateParamWithDefaults() *DateParam {
	this := DateParam{}
	return &this
}

// GetDate returns the Date field value if set, zero value otherwise.
func (o *DateParam) GetDate() string {
	if o == nil || IsNil(o.Date) {
		var ret string
		return ret
	}
	return *o.Date
}

// GetDateOk returns a tuple with the Date field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DateParam) GetDateOk() (*string, bool) {
	if o == nil || IsNil(o.Date) {
		return nil, false
	}
	return o.Date, true
}

// HasDate returns a boolean if a field has been set.
func (o *DateParam) HasDate() bool {
	if o != nil && !IsNil(o.Date) {
		return true
	}

	return false
}

// SetDate gets a reference to the given string and assigns it to the Date field.
func (o *DateParam) SetDate(v string) {
	o.Date = &v
}

func (o DateParam) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DateParam) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Date) {
		toSerialize["date"] = o.Date
	}
	return toSerialize, nil
}

type NullableDateParam struct {
	value *DateParam
	isSet bool
}

func (v NullableDateParam) Get() *DateParam {
	return v.value
}

func (v *NullableDateParam) Set(val *DateParam) {
	v.value = val
	v.isSet = true
}

func (v NullableDateParam) IsSet() bool {
	return v.isSet
}

func (v *NullableDateParam) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDateParam(val *DateParam) *NullableDateParam {
	return &NullableDateParam{value: val, isSet: true}
}

func (v NullableDateParam) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDateParam) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


