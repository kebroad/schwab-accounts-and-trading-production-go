/*
Trader API - Account Access and User Preferences

Schwab Trader API access to Account, Order entry and User Preferences

API version: 1.0.0
Contact: TraderAPI@Schwab.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"time"
)

// checks if the ExecutionLeg type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExecutionLeg{}

// ExecutionLeg struct for ExecutionLeg
type ExecutionLeg struct {
	LegId *int64 `json:"legId,omitempty"`
	Price *float64 `json:"price,omitempty"`
	Quantity *float64 `json:"quantity,omitempty"`
	MismarkedQuantity *float64 `json:"mismarkedQuantity,omitempty"`
	InstrumentId *int64 `json:"instrumentId,omitempty"`
	Time *time.Time `json:"time,omitempty"`
}

// NewExecutionLeg instantiates a new ExecutionLeg object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExecutionLeg() *ExecutionLeg {
	this := ExecutionLeg{}
	return &this
}

// NewExecutionLegWithDefaults instantiates a new ExecutionLeg object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExecutionLegWithDefaults() *ExecutionLeg {
	this := ExecutionLeg{}
	return &this
}

// GetLegId returns the LegId field value if set, zero value otherwise.
func (o *ExecutionLeg) GetLegId() int64 {
	if o == nil || IsNil(o.LegId) {
		var ret int64
		return ret
	}
	return *o.LegId
}

// GetLegIdOk returns a tuple with the LegId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExecutionLeg) GetLegIdOk() (*int64, bool) {
	if o == nil || IsNil(o.LegId) {
		return nil, false
	}
	return o.LegId, true
}

// HasLegId returns a boolean if a field has been set.
func (o *ExecutionLeg) HasLegId() bool {
	if o != nil && !IsNil(o.LegId) {
		return true
	}

	return false
}

// SetLegId gets a reference to the given int64 and assigns it to the LegId field.
func (o *ExecutionLeg) SetLegId(v int64) {
	o.LegId = &v
}

// GetPrice returns the Price field value if set, zero value otherwise.
func (o *ExecutionLeg) GetPrice() float64 {
	if o == nil || IsNil(o.Price) {
		var ret float64
		return ret
	}
	return *o.Price
}

// GetPriceOk returns a tuple with the Price field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExecutionLeg) GetPriceOk() (*float64, bool) {
	if o == nil || IsNil(o.Price) {
		return nil, false
	}
	return o.Price, true
}

// HasPrice returns a boolean if a field has been set.
func (o *ExecutionLeg) HasPrice() bool {
	if o != nil && !IsNil(o.Price) {
		return true
	}

	return false
}

// SetPrice gets a reference to the given float64 and assigns it to the Price field.
func (o *ExecutionLeg) SetPrice(v float64) {
	o.Price = &v
}

// GetQuantity returns the Quantity field value if set, zero value otherwise.
func (o *ExecutionLeg) GetQuantity() float64 {
	if o == nil || IsNil(o.Quantity) {
		var ret float64
		return ret
	}
	return *o.Quantity
}

// GetQuantityOk returns a tuple with the Quantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExecutionLeg) GetQuantityOk() (*float64, bool) {
	if o == nil || IsNil(o.Quantity) {
		return nil, false
	}
	return o.Quantity, true
}

// HasQuantity returns a boolean if a field has been set.
func (o *ExecutionLeg) HasQuantity() bool {
	if o != nil && !IsNil(o.Quantity) {
		return true
	}

	return false
}

// SetQuantity gets a reference to the given float64 and assigns it to the Quantity field.
func (o *ExecutionLeg) SetQuantity(v float64) {
	o.Quantity = &v
}

// GetMismarkedQuantity returns the MismarkedQuantity field value if set, zero value otherwise.
func (o *ExecutionLeg) GetMismarkedQuantity() float64 {
	if o == nil || IsNil(o.MismarkedQuantity) {
		var ret float64
		return ret
	}
	return *o.MismarkedQuantity
}

// GetMismarkedQuantityOk returns a tuple with the MismarkedQuantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExecutionLeg) GetMismarkedQuantityOk() (*float64, bool) {
	if o == nil || IsNil(o.MismarkedQuantity) {
		return nil, false
	}
	return o.MismarkedQuantity, true
}

// HasMismarkedQuantity returns a boolean if a field has been set.
func (o *ExecutionLeg) HasMismarkedQuantity() bool {
	if o != nil && !IsNil(o.MismarkedQuantity) {
		return true
	}

	return false
}

// SetMismarkedQuantity gets a reference to the given float64 and assigns it to the MismarkedQuantity field.
func (o *ExecutionLeg) SetMismarkedQuantity(v float64) {
	o.MismarkedQuantity = &v
}

// GetInstrumentId returns the InstrumentId field value if set, zero value otherwise.
func (o *ExecutionLeg) GetInstrumentId() int64 {
	if o == nil || IsNil(o.InstrumentId) {
		var ret int64
		return ret
	}
	return *o.InstrumentId
}

// GetInstrumentIdOk returns a tuple with the InstrumentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExecutionLeg) GetInstrumentIdOk() (*int64, bool) {
	if o == nil || IsNil(o.InstrumentId) {
		return nil, false
	}
	return o.InstrumentId, true
}

// HasInstrumentId returns a boolean if a field has been set.
func (o *ExecutionLeg) HasInstrumentId() bool {
	if o != nil && !IsNil(o.InstrumentId) {
		return true
	}

	return false
}

// SetInstrumentId gets a reference to the given int64 and assigns it to the InstrumentId field.
func (o *ExecutionLeg) SetInstrumentId(v int64) {
	o.InstrumentId = &v
}

// GetTime returns the Time field value if set, zero value otherwise.
func (o *ExecutionLeg) GetTime() time.Time {
	if o == nil || IsNil(o.Time) {
		var ret time.Time
		return ret
	}
	return *o.Time
}

// GetTimeOk returns a tuple with the Time field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExecutionLeg) GetTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Time) {
		return nil, false
	}
	return o.Time, true
}

// HasTime returns a boolean if a field has been set.
func (o *ExecutionLeg) HasTime() bool {
	if o != nil && !IsNil(o.Time) {
		return true
	}

	return false
}

// SetTime gets a reference to the given time.Time and assigns it to the Time field.
func (o *ExecutionLeg) SetTime(v time.Time) {
	o.Time = &v
}

func (o ExecutionLeg) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExecutionLeg) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.LegId) {
		toSerialize["legId"] = o.LegId
	}
	if !IsNil(o.Price) {
		toSerialize["price"] = o.Price
	}
	if !IsNil(o.Quantity) {
		toSerialize["quantity"] = o.Quantity
	}
	if !IsNil(o.MismarkedQuantity) {
		toSerialize["mismarkedQuantity"] = o.MismarkedQuantity
	}
	if !IsNil(o.InstrumentId) {
		toSerialize["instrumentId"] = o.InstrumentId
	}
	if !IsNil(o.Time) {
		toSerialize["time"] = o.Time
	}
	return toSerialize, nil
}

type NullableExecutionLeg struct {
	value *ExecutionLeg
	isSet bool
}

func (v NullableExecutionLeg) Get() *ExecutionLeg {
	return v.value
}

func (v *NullableExecutionLeg) Set(val *ExecutionLeg) {
	v.value = val
	v.isSet = true
}

func (v NullableExecutionLeg) IsSet() bool {
	return v.isSet
}

func (v *NullableExecutionLeg) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExecutionLeg(val *ExecutionLeg) *NullableExecutionLeg {
	return &NullableExecutionLeg{value: val, isSet: true}
}

func (v NullableExecutionLeg) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExecutionLeg) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


