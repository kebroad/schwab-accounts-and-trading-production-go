/*
Trader API - Account Access and User Preferences

Schwab Trader API access to Account, Order entry and User Preferences

API version: 1.0.0
Contact: TraderAPI@Schwab.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the FeeLeg type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FeeLeg{}

// FeeLeg struct for FeeLeg
type FeeLeg struct {
	FeeValues []FeeValue `json:"feeValues,omitempty"`
}

// NewFeeLeg instantiates a new FeeLeg object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFeeLeg() *FeeLeg {
	this := FeeLeg{}
	return &this
}

// NewFeeLegWithDefaults instantiates a new FeeLeg object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFeeLegWithDefaults() *FeeLeg {
	this := FeeLeg{}
	return &this
}

// GetFeeValues returns the FeeValues field value if set, zero value otherwise.
func (o *FeeLeg) GetFeeValues() []FeeValue {
	if o == nil || IsNil(o.FeeValues) {
		var ret []FeeValue
		return ret
	}
	return o.FeeValues
}

// GetFeeValuesOk returns a tuple with the FeeValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeeLeg) GetFeeValuesOk() ([]FeeValue, bool) {
	if o == nil || IsNil(o.FeeValues) {
		return nil, false
	}
	return o.FeeValues, true
}

// HasFeeValues returns a boolean if a field has been set.
func (o *FeeLeg) HasFeeValues() bool {
	if o != nil && !IsNil(o.FeeValues) {
		return true
	}

	return false
}

// SetFeeValues gets a reference to the given []FeeValue and assigns it to the FeeValues field.
func (o *FeeLeg) SetFeeValues(v []FeeValue) {
	o.FeeValues = v
}

func (o FeeLeg) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FeeLeg) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.FeeValues) {
		toSerialize["feeValues"] = o.FeeValues
	}
	return toSerialize, nil
}

type NullableFeeLeg struct {
	value *FeeLeg
	isSet bool
}

func (v NullableFeeLeg) Get() *FeeLeg {
	return v.value
}

func (v *NullableFeeLeg) Set(val *FeeLeg) {
	v.value = val
	v.isSet = true
}

func (v NullableFeeLeg) IsSet() bool {
	return v.isSet
}

func (v *NullableFeeLeg) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFeeLeg(val *FeeLeg) *NullableFeeLeg {
	return &NullableFeeLeg{value: val, isSet: true}
}

func (v NullableFeeLeg) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFeeLeg) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


